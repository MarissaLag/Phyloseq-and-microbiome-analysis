library("devtools")
install.packages("devtools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
library("devtools")
library(phyloseq)
install.packages("phyloseq")
library("devtools")
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
library("devtools")
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
force = TRUE
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData", force = TRUE)
library(phyloseq)
BiocManager::install("phyloseq")
library(phyloseq)
BiocManager::install("phyloseq", force = TRUE)
library("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
uninstall(pkg = "phyloseq")
uninstall.packages(phyloseq)
source('http://bioconductor.org/biocLite.R')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomeInfoDbData", force = TRUE)
library(phyloseq)
BiocManager::install("phyloseq", force = TRUE)
library(GenomeInfoDbData)
library(phyloseq)
library(GenomeInfoDb)
library(vegan)
library(vegan)
library(microbiome)
library(microbiome)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
library(microbiome)
BiocManager::install("phyloseq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocManager")
BiocManager::install("BiocManager", force = TRUE)
BiocManager::install("GenomeInfoDbData", force = TRUE)
BiocManager::install("phyloseq")
BiocManager::install("rhdf5")
library(phyloseq)
find.package('phyloseq')
lib.paths()
.libPaths()
install.packages("phyloseq")
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
library(phyloseq)
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
##update all changes
library(microbiome)
##update all changes
library(microbiome)
Marissa_MU42022_rarefied_20231016 <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022_rarefied_20231016.rds")
Marissa_MU42022_rarefied_20231016 <- readRDS("~/Documents/GitHub/Phyloseq-and-microbiome-analysis/Marissa_MU42022_rarefied_20231016.rds")
pseq <-  Marissa_MU42022_rarefied_20231016
library("datarium")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
set.seed(123)
str(Data)
# Convert Score column from character to numerical data
Data$Family_Number <- as.character(Data$Family_Number)
# Check for any issues after conversion
summary(Data$Family_Number)
Data$Size <- as.numeric(Data$Size)
model <- aov(Size ~ Treatment * Family_Number, data=Data)
model
#view summary of three-way ANOVA
summary(model)
Data = X60_fert_Phenotype_Data_CSV
Data %>%
group_by(Family_Number) %>%
identify_outliers()
Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
outliers <- Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
print(outliers)
View(outliers)
# Build the linear model
model  <- lm(Size ~ Family_Number, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
ggboxplot(Data, x = "Family_Number", y = "Size")
shapiro_test(residuals(model))
shapiro_test(residuals(model))
ks.test(residuals(model))
# Compute Shapiro-Wilk test of normality
#Note that, if your sample size is greater than 50, the normal QQ plot is preferred because at larger sample sizes the Shapiro-Wilk test becomes very sensitive even to a minor deviation from normality.
shapiro_test(residuals(model))
#if larger sample size:
ggqqplot(Data, "Size", facet.by = "Family_Number")
size_values <- Data$Size[Data$Family_Number == 10]
# Print the size values
print(size_values)
# Build the linear model
model  <- lm(Size ~ Family_Number, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
model  <- lm(Size ~ Treatment, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
Q1 <- quantile(Data$Size, 0.25)
#Remove outliers ----
#1st remove NA values
df_clean <- na.omit(Data$Size)
Q1 <- quantile(df_clean$Size, 0.25)
Q1 <- quantile(df_clean, 0.25)
Q3 <- quantile(df_clean, 0.75)
# Calculate the IQR
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df_clean <- Data[Data$Size >= lower_bound & Data$Size <= upper_bound, ]
outliers <- df_clean %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
df_clean
outliers <- df_clean %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
View(outliers)
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
ggboxplot(Data, x = "Family_Number", y = "Size")
outliers <- Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
outliers <- Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
outliers <- Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
outliers <- Data %>%
group_by(Family_Number) %>%
identify_outliers(Size)
View(outliers)
ggboxplot(Data, x = "Family_Number", y = "Size")
# Build the linear model
model  <- lm(Size ~ Family_Number, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
sqrt <- sqrt(Data$Size)
model  <- lm(Size ~ Family_Number, data = sqrt)
sqrt
Data$Size <- sqrt(Data$Size)
Data$Size
View(Data$Size)
model  <- lm(Size ~ Family_Number, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
View(Data$Size)
View(Data$Size)
View(Data)
model  <- lm(Size ~ Family_Number, data = Data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data$Size <- log(Data$Size)
View(Data)
model  <- lm(Size ~ Family_Number, data = Data)
ggqqplot(residuals(model))
Data %>%
group_by(Treatment) %>%
shapiro_test(Size)
Data %>%
group_by(Family_Number) %>%
shapiro_test(Size)
Data %>%
group_by(Family_Text) %>%
shapiro_test(Size)
#if larger sample size:
ggqqplot(Data, "Size", facet.by = "Family_Number")
#if larger sample size:
ggqqplot(Data, "Size", facet.by = "Treatment")
#get means of groups ----
Data %>% sample_n_by(Treatment, size = 2)
Data$Size <- sqrt(Data$Size)
#get means of groups ----
Data %>% sample_n_by(Treatment, size = 2)
Data %>% sample_n_by(Treatment, size = 2)
ggqqplot(Data, "Size", facet.by = "Treatment")
library(readr)
X60_fert_Phenotype_Data_CSV <- read_csv("~/Downloads/60% fert. Phenotype Data CSV.csv")
View(X60_fert_Phenotype_Data_CSV)
Data = X60_fert_Phenotype_Data_CSV
mean_size <- mean(Data$Size)
sd_size <- sd(Data$Size)
mean_size
Data$Size[Data$Size == ""] <- NA
df_clean <- na.omit(df$Size)
Data$Size[Data$Size == ""] <- NA
df_clean <- na.omit(Data$Size)
mean_size <- mean(df_clean$Size)
mean_size <- mean(df_clean$Size)
df_clean
Data$Size[Data$Size == ""] <- NA
df_clean <- na.omit(Data$Size)
mean_size <- mean(df_clean$Size)
Data$Size[Data$Size == ""] <- NA
# Remove NA values from the "Size" column
df_clean <- na.omit(Data$Size)
# Calculate the mean of the cleaned "Size" data
mean_size <- mean(df_clean)
sd_size <- sd(df_clean)
mean_size
sd_size
# Perform z-score transformation
df$Size_zscore <- (df$Size - mean_size) / sd_size
# Perform z-score transformation
Data$Size_zscore <- (Data$Size - mean_size) / sd_size
View(Data)
model  <- lm(Size_zscore ~ Family_Number, data = Data)
ggqqplot(residuals(model))
plot(model, 1)
model  <- lm(Size ~ Family_Number, data = Data)
ggqqplot(residuals(model))
plot(model, 1)
plot(model, 1)
model  <- lm(Size ~ Family_Number, data = Data)
ggqqplot(residuals(model))
plot(model, 1)
Data %>% levene_test(Size ~ Treatment)
Data %>% levene_test(Size_zscore ~ Treatment)
str(Data)
Data %>% levene_test(Size_zscore ~ Family_Number)
Data %>% levene_test(Size_zscore ~ Family_Text)
Data %>% levene_test(Size_zscore ~ Family_text)
#perform three-way ANOVA
model <- aov(Size ~ Treatment * Family_text, data=Data)
model
model <- lm(Size ~ Treatment * Family_text,
data = Data
)
Anova(model)
Anova(model, type = 3)
pairwise.t.test(dat$Size, Data$Family_text,
p.adjust.method = "BH"
)
pairwise.t.test(Data$Size, Data$Family_text,
p.adjust.method = "BH"
)
pairwise.t.test(Data$Size, Data$Treatment,
p.adjust.method = "BH"
)
pairwise.t.test(Data$Size, Data$Family_text,
p.adjust.method = "BH"
)
View(pairwise.t.test())
pairwise <- pairwise.t.test(Data$Size, Data$Family_text,
p.adjust.method = "BH"
)
pairwise
View(pairwise)
pairwise[["p.value"]]
mod <- aov(Size ~ Treatment * Family_text,
data = Data
)
TukeyHSD(mod,
which = "Treatment:Family_text"
)
par(mar = c(4.1, 13.5, 4.1, 2.1))
# create confidence interval for each comparison
plot(TukeyHSD(mod, which = "Treatment:Family_text"),
las = 2 # rotate x-axis ticks
)
TukeyHSD(mod,
which = "Family_text"
)
plot(TukeyHSD(mod, which = "Treatment:Family_text"),
las = 2 # rotate x-axis ticks
)
library(effects)
install.packages("effects")
library(effects)
plot(allEffects(mod))
mod <- aov(Size ~ Treatment,
data = Data
)
plot(allEffects(mod))
library(ggpubr)
ggline(subset(Data, !is.na(Size)), # remove NA level for sex
x = "Treatment",
y = "Size",
color = "Family_text",
add = c("mean_se") # add mean and standard error
) +
labs(y = "Mean of body mass (g)")
library(ggpubr)
ggline(subset(Data, !is.na(Size)), # remove NA level for sex
x = "Treatment",
y = "Size",
color = "Family_text",
add = c("mean_se") # add mean and standard error
) +
labs(y = "Size")
ggplot(Data, aes(Family_text, Size, colour = Treatment)) + geom_boxplot()+ scale_color_manual(values = c("black","grey")) + theme_bw() + ylab("Number of mites")
