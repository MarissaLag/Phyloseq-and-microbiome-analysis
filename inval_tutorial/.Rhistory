pseq <- subset_taxa(pseq,Family!="Mitochondria")
pseq <- subset_taxa(pseq,Kingdom!="k__Archaea")
pseq <- subset_taxa(pseq,Kingdom!="Archaea")
pseq <- subset_taxa(pseq,Order!="Chloroplast")
#Check if any chloro, ,mito, or achaeae
tax_levels <- colnames(pseq@tax_table)
chloroplast_archaea_mitochondria <- c("chloroplast", "archaea", "mitochondria")
any_contain <- sapply(chloroplast_archaea_mitochondria, function(term) {
any(grepl(term, tolower(pseq@tax_table[, tax_levels]), ignore.case = TRUE))
})
any(any_contain)
x2 = prune_taxa(taxa_sums(pseq) > 300, pseq)
pseq <- x2
pseq
install.packages("zCompositions")
install.packages("zCompositions")
library(zCompositions)
otu_matrix <- as.matrix(otu_table(pseq))
otu_imputed <- zCompositions(otu_matrix)
otu_imputed <- cmultRepl(otu_matrix)
otu_imputed
View(otu_imputed)
otu_table_imputed <- otu_table(otu_imputed, taxa_are_rows = FALSE)
pseq_imputed <- phyloseq(otu_table_imputed, sample_data(pseq), tax_table(pseq))
otu_matrix <- as.matrix(otu_table(pseq))
otu_imputed <- cmultRepl(otu_matrix,
method = "CZM")
View(pseq@otu_table)
otu_table_imputed <- otu_table(otu_imputed, taxa_are_rows = FALSE)
pseq_imputed <- phyloseq(otu_table_imputed, sample_data(pseq), tax_table(pseq))
pseq_imputed
pseq <- pseq_imputed
pseq
metaSeqObject1=phyloseq_to_metagenomeSeq(pseq)
pseq
PB2023_spat_not_rarefied_normalized_Jan2025 <- readRDS("~/Documents/GitHub/Phyloseq and microbiome analysis/Old RDS files/PB2023_spat_not_rarefied_normalized_Jan2025.rds")
pseq <- PB2023_spat_filtered_not_rarefied
otu_matrix <- as.matrix(otu_table(pseq))
otu_imputed <- cmultRepl(otu_matrix,
method = "CZM")
otu_table_imputed <- otu_table(otu_imputed, taxa_are_rows = FALSE)
pseq_imputed <- phyloseq(otu_table_imputed, sample_data(pseq), tax_table(pseq))
pseq_imputed
pseq
original_samples <- sample_names(pseq)
imputed_samples <- sample_names(pseq_imputed)
# Find samples that were removed
removed_samples <- setdiff(original_samples, imputed_samples)
print(removed_samples)
# Subset sample_data to keep only samples in pseq_imputed
sample_data(pseq_imputed) <- sample_data(pseq_imputed)[imputed_samples, ]
pseq_imputed
pseq <- pseq_imputed
pseq
# Convert from filtered phyloseq object to metagenomeseq object:
metaSeqObject1=phyloseq_to_metagenomeSeq(pseq)
# Extract OTU table and check if any samples are empty
otu_counts <- as.data.frame(otu_table(pseq))
empty_samples <- colnames(otu_counts)[colSums(otu_counts) == 0]
print(empty_samples)  # List of empty samples
View(pseq@tax_table)
PB2023_rarefied_3000 <- readRDS("~/Documents/GitHub/Phyloseq and microbiome analysis/Old RDS files/PB2023_rarefied_3000.rds")
PB2023_rarefied_3000
library(readr)
data_table_PB2023_rare3000 <- read_csv("data_table_PB2023_rare3000.csv")
View(data_table_PB2023_rare3000)
pc_FUN <- data_table_PB2023_rare3000
funi_df<- t(pc_FUN)
dim(pc_FUN)
#mb2021
matrix_F = pc_FUN[ ,7:146]
### Make the equation. Saying we want to examine specific column of metadata
time_a_F = pc_FUN$Treatment
set.seed(123)
inv_F_spat = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
results <- summary(inv_F_spat)
#for mb2021 project remove tank 9 from pc_Fun for mb2021
pc_FUN <- pc_FUN[!pc_FUN$`Treatment` %in% c("Continuous Probiotics", "James"), ]
#Inverse data
funi_df<- t(pc_FUN)
#mb2021
matrix_F = pc_FUN[ ,7:146]
### Make the equation. Saying we want to examine specific column of metadata
time_a_F = pc_FUN$Treatment
set.seed(123)
inv_F_spat = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
results <- summary(inv_F_spat)
pseq <- PB2023_rarefied_3000
#PB2023 filtering
pseq <- subset_samples(pseq, !Treatment %in% c("James", "Continuous Probiotics"))
# Extract the OTU table and convert it to a matrix
otu_table_matrix <- as(otu_table(pseq), "matrix")
#If CSS normalized, must covert to integers
# Rounding the values to the nearest integer
otu_table_matrix <- round(otu_table_matrix)
# Transpose the OTU table matrix
otu_table_matrix <- t(otu_table_matrix)
sample_info <- sample_data(pseq)
sample_info$Treatment <- as.factor(sample_info$Treatment)
group_vector <- sample_info$Treatment
group_vector <- as.character(group_vector)
aldex_clr <- aldex.clr(otu_table_matrix, group_vector, mc.samples = 128)
aldex_results <- aldex.kw(aldex_clr)
significant_kw <- aldex_results[aldex_results$kw.ep < 0.05, ]
significant_glm <- aldex_results[aldex_results$glm.ep < 0.05, ]
significant_kw
significant_glm
View(pseq@tax_table)
pseq <- PB2023_spat_filtered_not_rarefied
#PB2023 filtering
pseq <- subset_samples(pseq, !Treatment %in% c("James", "Continuous Probiotics"))
otu_table_matrix <- as(otu_table(pseq), "matrix")
#If CSS normalized, must covert to integers
# Rounding the values to the nearest integer
otu_table_matrix <- round(otu_table_matrix)
# Transpose the OTU table matrix
otu_table_matrix <- t(otu_table_matrix)
# Extract sample data to get the group information
sample_info <- sample_data(pseq)
sample_info$Treatment <- as.factor(sample_info$Treatment)
group_vector <- sample_info$Treatment
group_vector <- as.character(group_vector)
# Perform CLR transformation and differential abundance test with ALDEx2
# 'mc.samples' is the number of Monte Carlo instances, typically set to 128 or 500
aldex_clr <- aldex.clr(otu_table_matrix, group_vector, mc.samples = 128)
# Use ALDEx2 for a t-test or ANOVA-like test depending on your groups
#t-test is for comparing 2 factors, Anova for more than 2 factors:
# For two groups: use aldex.ttest; for multiple groups: use aldex.kw
aldex_results <- aldex.kw(aldex_clr)
# Perform CLR transformation and differential abundance test with ALDEx2
# 'mc.samples' is the number of Monte Carlo instances, typically set to 128 or 500
#Use 500 for smaller sample sizes
aldex_clr <- aldex.clr(otu_table_matrix, group_vector, mc.samples = 500)
aldex_results <- aldex.kw(aldex_clr)
head(aldex_results)
significant_kw <- aldex_results[aldex_results$kw.ep < 0.05, ]
significant_glm <- aldex_results[aldex_results$glm.ep < 0.05, ]
significant_kw
significant_glm
pseq <- PB2023_spat_filtered_not_rarefied
pseq <- subset_samples(pseq, Treatment %in% c("Control", "Probiotics", "Killed-Probiotics"))
any(taxa_sums(pseq) == 0)
#if true
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
set.seed(123)
pseq_perm = pseq
meta_data_perm = microbiome::meta(pseq_perm)
meta_data_perm$Treatment = sample(meta_data_perm$Treatment)
meta_data_perm$Family <- sample(meta_data_perm$Family)
phyloseq::sample_data(pseq_perm) = meta_data_perm
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
p_adj_method = "holm",
pseudo = 0.1,
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
struc_zero = TRUE,
neg_lb = FALSE,
dunnet = TRUE)
res_prim = output$res
res_prim
pseq <- PB2023_rarefied_3000
pseq
# Subset the dataset to include only the relevant treatments
pseq <- subset_samples(pseq, Treatment %in% c("Control", "Probiotics", "Killed-Probiotics"))
any(taxa_sums(pseq) == 0)
#if true
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
set.seed(123)
pseq_perm = pseq
meta_data_perm = microbiome::meta(pseq_perm)
meta_data_perm$Treatment = sample(meta_data_perm$Treatment)
meta_data_perm$Family <- sample(meta_data_perm$Family)
phyloseq::sample_data(pseq_perm) = meta_data_perm
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
p_adj_method = "holm",
pseudo = 0.1,
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
struc_zero = TRUE,
neg_lb = FALSE,
dunnet = TRUE)
res_prim = output$res
res_prim
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
struc_zero = TRUE,
neg_lb = FALSE,
dunnet = TRUE)
res_prim = output$res
res_prim
pseq <- MU42022_filtered_Oct92024
pseq <- subset_samples(pseq, Age %in% c("Spat"))
pseq <- subset_samples(pseq, !Genetics %in% c("4"))
any(taxa_sums(pseq) == 0)
#if true
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
set.seed(123)
pseq_perm = pseq
meta_data_perm = microbiome::meta(pseq_perm)
meta_data_perm$Treatment = sample(meta_data_perm$Treatment)
meta_data_perm$Family <- sample(meta_data_perm$Family)
phyloseq::sample_data(pseq_perm) = meta_data_perm
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
struc_zero = TRUE,
neg_lb = FALSE,
dunnet = TRUE)
warnings()
res_prim = output$res
res_prim
#load
install.packages("GUniFrac")
library(GUniFrac)
pseq <- PB2023_spat_filtered_not_rarefied
pseq <- subset_samples(pseq, !Treatment %in% c("James", "Continuous Probiotics"))
res_zico = ZicoSeq(obj = pseq,
grp_name = "Treatment",
feature.dat.type = "count",
prev.filter = 0.1,
lib.size.factor = "TSS",
max.abund.filter = 0.1,
perm.no = 1000)
OTU <- pseq@otu_table
comm <- t(OTU)
Meta <- pseq@sam_data
meta.dat <- Meta
meta.dat
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = TRUE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
#Quality check
any(taxa_sums(pseq) == 0)
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
OTU <- pseq@otu_table
Meta <- pseq@sam_data
comm <- t(OTU)
meta.dat <- Meta
meta.dat
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = TRUE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
meta.dat$Treatment <- as.factor(meta.dat$Treatment)  # Convert to factor
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = TRUE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
str(meta.dat)
as.data.frame(meta.dat)
str(meta.dat)
meta.dat <- as.data.frame(meta.dat)
meta.dat
str(meta.dat)
meta.dat
str(meta.dat)
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
str(meta.dat)
meta.dat$Treatment <- as.factor(meta.dat$Treatment)  # Convert to factor
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = TRUE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
ZicoSeq.plot(ZicoSeq.obj, pvalue.type = 'p.adj.fdr', cutoff = 0.1, text.size = 10,
out.dir = NULL, width = 10, height = 6)
ZicoSeq.obj$feature.dat
names(ZicoSeq.obj)
# Raw p-values
raw_p_values <- ZicoSeq.obj$p.raw
raw_p_values
# Adjusted p-values for FDR
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
adj_p_values_fdr
# Adjusted p-values for FWER
adj_p_values_fwer <- ZicoSeq.obj$p.adj.fwer
adj_p_values_fwer
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
names(ZicoSeq.obj)
# Adjusted p-values for FDR
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
# Adjusted p-values for FDR
adj_p_values_fdr
# Adjusted p-values for FWER
adj_p_values_fwer <- ZicoSeq.obj$p.adj.fwer
adj_p_values_fwer
#may want to use CSS normalized
pseq <- PB2023_spat_not_rarefied_CSSnormalized_Jan2025
pseq <- subset_samples(pseq, !Treatment %in% c("James", "Continuous Probiotics"))
any(taxa_sums(pseq) == 0)
#if true
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
OTU <- pseq@otu_table
Meta <- pseq@sam_data
comm <- t(OTU)
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
meta.dat <- Meta
str(meta.dat)
meta.dat$Treatment <- as.factor(meta.dat$Treatment)  # Convert to factor
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
meta.dat <- Meta
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
str(meta.dat)
meta.dat$Treatment <- as.factor(meta.dat$Treatment)  # Convert to factor
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = TRUE, verbose = TRUE, return.feature.dat = TRUE)
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
adj_p_values_fdr
# Adjusted p-values for FWER
adj_p_values_fwer <- ZicoSeq.obj$p.adj.fwer
adj_p_values_fwer
raw_p_values <- ZicoSeq.obj$p.raw
raw_p_values
ZicoSeq.plot(ZicoSeq.obj, pvalue.type = 'p.adj.fdr', cutoff = 0.1, text.size = 10,
out.dir = NULL, width = 10, height = 6)
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = FALSE, verbose = TRUE, return.feature.dat = TRUE)
raw_p_values <- ZicoSeq.obj$p.raw
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
adj_p_values_fwer <- ZicoSeq.obj$p.adj.fwer
adj_p_values_fwer
adj_p_values_fdr
raw_p_values
#may want to use CSS normalized
pseq <- PB2023_spat_not_rarefied_CSSnormalized_Jan2025
any(taxa_sums(pseq) == 0)
#if true
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
OTU <- pseq@otu_table
Meta <- pseq@sam_data
comm <- t(OTU)
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
str(meta.dat)
meta.dat$Treatment <- as.factor(meta.dat$Treatment)  # Convert to factor
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 99,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = FALSE, verbose = TRUE, return.feature.dat = TRUE)
# Adjusted p-values for FDR
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
adj_p_values_fdr
ZicoSeq.plot(ZicoSeq.obj, pvalue.type = 'p.adj.fdr', cutoff = 0.1, text.size = 10,
out.dir = NULL, width = 10, height = 6)
