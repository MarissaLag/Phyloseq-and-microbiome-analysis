fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap("OTU")
filtered_ps
library("devtools")
library(phyloseq)
library(microbiome)
library(phyloseq)
library(DECIPHER)
library(phangorn)
library(ggtree)
library(ape)
pseq <- PB2023_spat_10X_limited_CSS
pseq_filt <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
any(taxa_sums(pseq_filt) == 0)
pseq_filtered <- prune_taxa(taxa_sums(pseq_filt) > 0, pseq_filt)
any(taxa_sums(pseq_filtered) == 0)
pseq <- microbiome::transform(pseq_filt, "compositional")
pseq <- psmelt(pseq)
sequence_ASVname_mapping_SMK <- read.delim("~/Documents/PhD/PB2023/sequence_ASVname_mapping_SMK.txt", header=FALSE)
View(sequence_ASVname_mapping_SMK)
colnames(sequence_ASVname_mapping_SMK) <- c("ASV", "Sequence")
merged_data <- merge(pseq, MU42022_sequence_ASVname_mapping, by.x = "OTU", by.y = "ASV", all.x = TRUE)
rhodobacteraceae_data <- subset(merged_data, Family == "Rhodobacteraceae")
asv230_sequence <- rhodobacteraceae_data$Sequence[rhodobacteraceae_data$OTU == "ASV230"][1]
merged_data <- merge(pseq, sequence_ASVname_mapping_SMK, by.x = "OTU", by.y = "ASV", all.x = TRUE)
rhodobacteraceae_data <- subset(merged_data, Family == "Rhodobacteraceae")
#Extract unique sequences for the Rhodobacteraceae ASVs
sequences <- unique(rhodobacteraceae_data$Sequence)
names(sequences) <- unique(rhodobacteraceae_data$OTU)  # Assign ASV names to the sequences
asv230_sequence <- rhodobacteraceae_data$Sequence[rhodobacteraceae_data$OTU == "ASV230"][1]
library(Biostrings)
rhodobacteraceae_data <- subset(merged_data, Family == "Rhodobacteraceae")
#Extract unique sequences for the Rhodobacteraceae ASVs
sequences <- unique(rhodobacteraceae_data$Sequence)
names(sequences) <- unique(rhodobacteraceae_data$OTU)  # Assign ASV names to the sequences
dna_sequences <- DNAStringSet(sequences)
ref_seq <- dna_sequences[["ASV230"]]
roseobacter_matches <- list()
for (i in names(dna_sequences)) {
# Skip if the current sequence is ASV558 itself
if (i == "ASV230") next
# Perform global pairwise alignment between ASV558 and the current sequence
alignment <- pairwiseAlignment(ref_seq, dna_sequences[[i]], type = "global")
# Calculate percentage identity
identity <- mean(pid(alignment), na.rm = TRUE)  # Remove NAs
# If identity is not NA and similarity is 89% or higher, add to the list of Roseobacter matches
if (!is.na(identity) && identity >= 89) {
roseobacter_matches[[i]] <- dna_sequences[[i]]
}
}
roseobacter_matches[["ASV230"]] <- ref_seq
# Check the results
print(roseobacter_matches)
roseobacter_df <- rhodobacteraceae_data[rhodobacteraceae_data$OTU %in% names(roseobacter_matches), ]
roseobacter_stats <- roseobacter_df %>%
group_by(OTU, Treatment) %>%
summarise(
Average_Abundance = mean(Abundance, na.rm = TRUE),
Std_Abundance = sd(Abundance, na.rm = TRUE),
.groups = 'drop'  # Drop grouping after summarising
)
library(RColorBrewer)
library(viridis)  # For gradient color palettes
# Create a stacked bar plot of ASV abundance by Treatment with no gridlines and a gradient color palette
ggplot(roseobacter_stats, aes(x = Treatment, y = Average_Abundance, fill = OTU)) +
geom_bar(stat = "identity", position = "stack") +  # Change position to "stack"
labs(title = "",
x = "",
y = "Average Relative Abundance") +
scale_fill_viridis_d(option = "F", direction = 1) +  # Use Viridis palette; adjust option for different colors
theme_bw() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 16, face = "bold"),
axis.text.y = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size=16, face = "bold"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
roseobacter_stats <- roseobacter_stats %>%
mutate(Treatment = recode(Treatment,
"Killed-Probiotics" = "Killed-Bacteria Added",
"Probiotics" = "Bacteria Added"))
roseobacter_stats$Treatment <- factor(roseobacter_stats$Treatment,
levels = c("Control", "Killed-Bacteria Added", "Bacteria Added"))
# Create a stacked bar plot of ASV abundance by Treatment with no gridlines and a gradient color palette
ggplot(roseobacter_stats, aes(x = Treatment, y = Average_Abundance, fill = OTU)) +
geom_bar(stat = "identity", position = "stack") +  # Change position to "stack"
labs(title = "",
x = "",
y = "Average Relative Abundance") +
scale_fill_viridis_d(option = "F", direction = 1) +  # Use Viridis palette; adjust option for different colors
theme_bw() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 16, face = "bold"),
axis.text.y = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size=16, face = "bold"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
filtered_ps <- ps %>%
filter(OTU %in% c("ASV275", "ASV231", "ASV227"))
pseq <- PB2023_spat_10X_limited_CSS
pseq <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
pseq <- microbiome::transform(pseq, "compositional")
ps <- psmelt(pseq)
filtered_ps <- ps %>%
filter(OTU %in% c("ASV275", "ASV231", "ASV227"))
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap("OTU")
#PB2023 results
filtered_ps <- ps %>%
filter(OTU %in% c("ASV227"))
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap("Family")
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, Family, OTU) %>%
summarise(Average_Abundance = mean(Abundance),
std_Abundance = sd(Abundance))
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap("Family")
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap(~Family)
average_abundance
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, sample_Family, OTU) %>%
summarise(Average_Abundance = mean(Abundance),
std_Abundance = sd(Abundance))
average_abundance
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap(~sample_Family)
#PB2023 results
filtered_ps <- ps %>%
filter(OTU %in% c("ASV231"))
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, sample_Family, OTU) %>%
summarise(Average_Abundance = mean(Abundance),
std_Abundance = sd(Abundance))
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap(~sample_Family)
#PB2023 results
filtered_ps <- ps %>%
filter(OTU %in% c("ASV275"))
average_abundance <- filtered_ps %>%
group_by(Treatment, sample_Family, OTU) %>%
summarise(Average_Abundance = mean(Abundance),
std_Abundance = sd(Abundance))
average_abundance
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap(~sample_Family)
pseq <- PB2023_spat_10X_limited_CSS
pseq <- subset_samples(pseq, !Treatment %in% c("James", "Continuous Probiotics"))
#Quality check
any(taxa_sums(pseq) == 0)
pseq_filtered <- prune_taxa(taxa_sums(pseq) > 0, pseq)
any(taxa_sums(pseq_filtered) == 0)
pseq <- pseq_filtered
OTU <- pseq@otu_table
Meta <- pseq@sam_data
comm <- t(OTU)
meta.dat = sample_data(pseq)
meta = as.matrix.data.frame(meta.dat)
meta.dat = as.data.frame(meta)
meta.dat
meta.dat$Family <- as.factor(meta.dat$Family)
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Treatment', feature.dat.type = "count",
adj.name = "Family",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 999,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = FALSE, verbose = TRUE, return.feature.dat = TRUE)
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
significant_asvs_fdr <- names(adj_p_values_fdr)[adj_p_values_fdr < 0.05]
raw_p_values <- ZicoSeq.obj$p.raw
significant_asvs_raw <- names(raw_p_values)[raw_p_values < 0.05]
significant_asvs_raw
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
significant_asvs_fdr <- names(adj_p_values_fdr)[adj_p_values_fdr < 0.05]
significant_asvs_fdr
# Adjusted p-values for FWER
adj_p_values_fwer <- ZicoSeq.obj$p.adj.fwer
adj_p_values_fwer
ZicoSeq.obj <- ZicoSeq(meta.dat = meta.dat, feature.dat = comm,
grp.name = 'Family', feature.dat.type = "count",
adj.name = "Treatment",
# Filter to remove rare taxa
prev.filter = 0.2, mean.abund.filter = 0,
max.abund.filter = 0.002, min.prop = 0,
# Winsorization to replace outliers
is.winsor = TRUE, outlier.pct = 0.03, winsor.end = 'top',
# Posterior sampling
is.post.sample = FALSE, post.sample.no = 25,
# Use the square-root transformation
link.func = list(function (x) x^0.5), stats.combine.func = max,
# Permutation-based multiple testing correction
perm.no = 999,  strata = NULL,
# Reference-based multiple stage normalization
ref.pct = 0.5, stage.no = 6, excl.pct = 0.2,
# Family-wise error rate control
is.fwer = FALSE, verbose = TRUE, return.feature.dat = TRUE)
raw_p_values <- ZicoSeq.obj$p.raw
significant_asvs_raw <- names(raw_p_values)[raw_p_values < 0.05]
significant_asvs_raw
adj_p_values_fdr <- ZicoSeq.obj$p.adj.fdr
significant_asvs_fdr <- names(adj_p_values_fdr)[adj_p_values_fdr < 0.05]
significant_asvs_fdr
filtered_ps <- ps %>%
filter(OTU %in% c( "ASV32", "ASV397","ASV438","ASV597","ASV774","ASV1119"))
average_abundance <- filtered_ps %>%
group_by(Treatment, sample_Family, OTU) %>%
summarise(Average_Abundance = mean(Abundance),
std_Abundance = sd(Abundance))
ggplot(average_abundance, aes(y = Average_Abundance, x = Treatment, fill = Treatment)) +
geom_bar(position = "stack", stat = "identity", colour = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
panel.border = element_blank()) +
facet_wrap(~sample_Family)
roseobacter_df
# Calculate average and standard deviation of Abundance for each OTU across treatment groups
roseobacter_stats <- roseobacter_df %>%
group_by(OTU, Treatment, sample_Family ) %>%
summarise(
Average_Abundance = mean(Abundance, na.rm = TRUE),
Std_Abundance = sd(Abundance, na.rm = TRUE),
.groups = 'drop'  # Drop grouping after summarising
)
roseobacter_stats
roseobacter_stats <- roseobacter_stats %>%
mutate(Treatment = recode(Treatment,
"Killed-Probiotics" = "Killed-Bacteria Added",
"Probiotics" = "Bacteria Added"))
roseobacter_stats$Treatment <- factor(roseobacter_stats$Treatment,
levels = c("Control", "Killed-Bacteria Added", "Bacteria Added"))
# Create a stacked bar plot of ASV abundance by Treatment with no gridlines and a gradient color palette
ggplot(roseobacter_stats, aes(x = Treatment, y = Average_Abundance, fill = OTU)) +
geom_bar(stat = "identity", position = "stack") +  # Change position to "stack"
labs(title = "",
x = "",
y = "Average Relative Abundance") +
scale_fill_viridis_d(option = "F", direction = 1) +  # Use Viridis palette; adjust option for different colors
theme_bw() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 16, face = "bold"),
axis.text.y = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size=16, face = "bold"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
facet_wrap(~sample_Family)
load.packages(ggplot2)
load(ggplot2)
load("ggplot2")
loaded_packages("ggplot2")
library("ggplot2")
library(ggplot2)
install.packages("ggplot2") #Notice, you need quotations here
install.packages("ggplot2")
#Now you can use R code to open the data, but you have to know the source path (i.e., where its located)
#For example:
read.csv("/Users/Marissa/Desktop/Applied Microbiology/"SeaweedSauerkraut_D6_data.csv")
getwd()
library(readr)
SeaweedSauerkraut_D6_data <- read_csv("~/Documents/PhD/BIOL432/SeaweedSauerkraut_D6_data.csv")
View(SeaweedSauerkraut_D6_data)
Data <- SeaweedSauerkraut_D6_data
pivot_longe(Data)
pivot_longer(Data)
Long <- Data %in%
pivot_longer(cols = pH)
Long <- Data %in%
pivot_longer(cols = "pH")
Long <- Data %in%
pivot_longer(cols = pH,
names_to = Percent_Seaweed,
values_to = MacConkey)
Long <- Data %in%
pivot_longer(
names_to = Percent_Seaweed,
values_to = MacConkey)
Long <- Data %>%
pivot_longer(cols = pH,
names_to = "Percent_Seaweed",
values_to = "MacConkey")
str(Data)
Data <- SeaweedSauerkraut_D6_data
Data
Data_long <- Data %>%
pivot_longer(cols = c(pH, TTA, MacConkey, MRS, Log_MacConkey, Log_MRS),
names_to = "Variable",
values_to = "Value")
Data_long
Data_proton <- Data %>%
mutate(Proton_Concentration = 10^(-pH))
Data_proton
Data_proton <- Data %>%
mutate(log_TTA = log(TTA))
Data_proton
Data_filtered <- Data %>%
filter(pH)
Data
Data_filtered <- Data %>%
filter(Data %in% pH)
Data_filtered <- Data %>%
filter(Data %in% c("pH", "TTA"))
#Filter
Data_filtered <- Data %>%
filter(Percent_seaweed > 50)
Data_filtered
?ggplot2
#Summarize
Data_summarize <- Data %>%
group_by(Percent_seaweed, pH) +
summarise(Mean = mean(pH))
#Summarize
Data_summarize <- Data %>%
group_by(Percent_seaweed, pH) +
summarise(Mean = mean(-pH))
#Summarize
Data_summarize <- Data %>%
group_by(Percent_seaweed, pH) +
summarise(Mean = mean("pH"))
Data_summarize <- Data %>%
group_by(Percent_seaweed, pH)
#Summarize
Data_summarize
Data_summarize <- Data %>%
summarise(Mean = mean("pH"))
Data_summarize
Data_summarize <- Data %>%
summarise(Mean = mean(pH))
Data_summarize
#Summarize
Data_summarize <- Data %>%
group_by(Percent_seaweed, pH) +
summarise(Mean = mean(pH))
Plot_ph<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH))
Plot_ph
plot_pH <- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH))
plot_pH <- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH))
plot_pH <- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH)) + ylim(0,5)
plot_pH
#Make a bar plot of log_MacConkey for each percent seaweed
Plot_ph3<- ggplot(Object1) + geom_bar(aes(x=Percent_seaweed, y = log_MacConkey))
#Make a bar plot of log_MacConkey for each percent seaweed
Plot_ph3<- ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = log_MacConkey))
Plot_ph3
#Make a bar plot of log_MacConkey for each percent seaweed
Plot_ph3<- ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = Log_MacConkey))
Plot_ph3<
)
Plot_ph3
#Make a bar plot of log_MacConkey for each percent seaweed
Plot_ph3<- ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = Log_MacConkey))
#Make a bar plot of log_MacConkey for each percent seaweed
gplot(Data) + geom_bar(aes(x=Percent_seaweed, y = Log_MacConkey))
#Make a bar plot of log_MacConkey for each percent seaweed
ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = Log_MacConkey))
#Make a bar plot of log_MacConkey for each percent seaweed
ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = MRS))
str(Data)
#Notice you are getting errors?
#This should fix it, why?
Data$Percent_seaweed <- as.factor(Data$Percent_seaweed)
#Make a bar plot of log_MacConkey for each percent seaweed
ggplot(Data) + geom_bar(aes(x=Percent_seaweed, y = MRS))
#Make a bar plot of log_MacConkey for each percent seaweed
ggplot(Data) + geom_col(aes(x=Percent_seaweed, y = MRS))
ggplot(Data) + geom_col(aes(x=Percent_seaweed, y = MRS, fill = Percent_seaweed))
p_facet <- ggplot(Data) +
geom_col(aes(x=Percent_seaweed, y = MRS, fill = Percent_seaweed)) +
facet_wrap(~Percent_seaweed)
p_facet
p_facet <- ggplot(Data) +
geom_col(aes(x=TTA, y = MRS, fill = Percent_seaweed)) +
facet_wrap(~Percent_seaweed)
p_facet
p_facet <- ggplot(Data) +
geom_col(aes(x=TTA, y = MRS, fill = Percent_seaweed)) +
facet_wrap(~Percent_seaweed)
p_facet
Plot_ph3<- ggplot(Object1) + geom_point(aes(x=Percent_seaweed, y = pH)) +ylim(1,7) + theme_classic() +xlab("% Bull Kelp") + geom_hline(aes(yintercept = 4.2), colour = "red")+ annotate(geom="text", x=50, y=5, label="Danger Zone", color = "red")
Plot_ph3<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH)) +ylim(1,7) + theme_classic() +xlab("% Bull Kelp") + geom_hline(aes(yintercept = 4.2), colour = "red")+ annotate(geom="text", x=50, y=5, label="Danger Zone", color = "red")
## Call up!
Plot_ph3
Plot_ph3<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH)) +ylim(1,7) + theme_classic() +xlab("% Bull Kelp") + geom_hline(aes(yintercept = 4.2), colour = "red")+ annotate(geom="text", x=50, y=5, label="Danger Zone", color = "red")
## Call up!
Plot_ph3
Plot_ph3<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH)) +ylim(1,7) + theme_classic() +xlab("% Bull Kelp") + geom_hline(aes(yintercept = 4.2), colour = "red")+ annotate(geom="text", x=5, y=5, label="Danger Zone", color = "red")
## Call up!
Plot_ph3
Plot_ph3<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = pH)) +ylim(1,7) + theme_classic() +xlab("% Bull Kelp") + geom_hline(aes(yintercept = 4.2), colour = "red")+ annotate(geom="text", x=5, y=4.2, label="Danger Zone", color = "red")
## Call up!
Plot_ph3
Plot_Mac<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = Log_MacConkey)) +ylim(0,9) + theme_classic() +xlab("% Bull Kelp") + ylab("Gram negative bacteria Log  CFU/mL") +geom_smooth(aes(x=Percent_seaweed, y = Log_MacConkey),se = FALSE, method=loess)
Plot_Mac
###Oh Cool! Maybe we should add a smooth line! This can be done with different methods. lm = straight line. loess = curved ine. The data will dictate which one is better to use.
Plot_TTA_s<- ggplot(Object1) + geom_point(aes(x=Percent_seaweed, y = TTA)) +ylim(0,9) + theme_classic() +xlab("% Bull Kelp") + ylab("TTA grams/Litre") +geom_smooth(aes(x=Percent_seaweed, y = TTA),se = FALSE, method=lm)
Plot_TTA_s<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = TTA)) +ylim(0,9) + theme_classic() +xlab("% Bull Kelp") + ylab("TTA grams/Litre") +geom_smooth(aes(x=Percent_seaweed, y = TTA),se = FALSE, method=lm)
Plot_TTA_s
Data$Percent_seaweed <- as.numeric(Data$Percent_seaweed)
Plot_TTA_s<- ggplot(Data) + geom_point(aes(x=Percent_seaweed, y = TTA)) +ylim(0,9) + theme_classic() +xlab("% Bull Kelp") + ylab("TTA grams/Litre") +geom_smooth(aes(x=Percent_seaweed, y = TTA),se = FALSE, method=lm)
Plot_TTA_s
