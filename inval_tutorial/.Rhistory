coord_flip() +
labs(title = "PB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
ggplot(sigtab_KPB, aes(x = reorder(Combined_Info, log2FoldChange), y = log2FoldChange, fill = Family)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(title = "KPB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
custom_palette <- brewer.pal(12, "Set3")
ggplot(sigtab_KPB, aes(x = reorder(Combined_Info, log2FoldChange), y = log2FoldChange, fill = Family)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(title = "KPB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
custom_palette <- brewer.pal(12, "Set2")
custom_palette <- brewer.pal(12, "Set1")
custom_palette <- brewer.pal(12, "Set2")
custom_palette <- brewer.pal(12, "Set4")
custom_palette <- brewer.pal(12, "Set3")
ggplot(sigtab_KPB, aes(x = reorder(Combined_Info, log2FoldChange), y = log2FoldChange, fill = Family)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(title = "KPB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
ggplot(sigtab_PB, aes(x = reorder(Combined_Info, log2FoldChange), y = log2FoldChange, fill = Family)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(title = "PB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
ggplot(sigtab_contPB, aes(x = reorder(Combined_Info, log2FoldChange), y = log2FoldChange, fill = Family)) +
geom_bar(stat = "identity", color = "black") +
coord_flip() +
labs(title = "contPB-Control",
x = "Genus; ASV",
y = "Log2 Fold Change") +
theme_bw() +
theme(panel.grid.major = element_blank(),   # Remove major gridlines
panel.grid.minor = element_blank(),   # Remove minor gridlines
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(values = custom_palette)
pseq <- PB2023_spat_not_rarefied_normalized
View(pseq@otu_table)
pseq <- PB2023_spat_not_rarefied_normalized #Nothing significant
pseq
pseq@sam_data$Treatment
# Subset the dataset to include only the relevant treatments
pseq <- subset_samples(pseq, Treatment %in% c("Control", "Probiotics", "Killed-Probiotics"))
pseq@sam_data$Treatment
#Sanity check
#check if any OTUs are not present in any samples (want false)
any(taxa_sums(pseq) == 0)
library(ANCOMBC)
library(tidyverse)
library(DT)
pseq_perm = pseq
meta_data_perm = microbiome::meta(pseq_perm)
meta_data_perm$Treatment = sample(meta_data_perm$Treatment)
meta_data_perm$Age = sample(meta_data_perm$Age)
phyloseq::sample_data(pseq_perm) = meta_data_perm
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
p_adj_method = "holm",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
struc_zero = TRUE,
neg_lb = TRUE)
res_prim = output$res
res_prim
VIew(res_prim)
View(res_prim)
meta_data_perm <- microbiome::meta(pseq_perm)
meta_data_perm$Treatment <- sample(meta_data_perm$Treatment)
meta_data_perm$Age <- sample(meta_data_perm$Age)
meta_data_perm$Genetics <- sample(meta_data_perm$Genetics) # Permute Family if required
phyloseq::sample_data(pseq_perm) <- meta_data_perm
#Random effect - not converging
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
rand_formula = "Treatment | Genetics",
p_adj_method = "bonferroni",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
lme_control = lme4::lmerControl(),
struc_zero = FALSE,
neg_lb = FALSE)
#Random effect - not converging
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
rand_formula = "Treatment | Family",
p_adj_method = "bonferroni",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
lme_control = lme4::lmerControl(),
struc_zero = FALSE,
neg_lb = FALSE)
res_prim = output$res
res_prim
View(res_prim)
meta_data_perm <- microbiome::meta(pseq_perm)
meta_data_perm$Treatment <- sample(meta_data_perm$Treatment)
meta_data_perm$Age <- sample(meta_data_perm$Age)
# meta_data_perm$Genetics <- sample(meta_data_perm$Genetics)
meta_data_perm$Family <- sample(meta_data_perm$Family)
phyloseq::sample_data(pseq_perm) <- meta_data_perm
#Random effect - not converging
output = ancombc2(data = pseq_perm, tax_level = "Genus",
fix_formula = "Treatment",
rand_formula = "Treatment | Family",
p_adj_method = "bonferroni",
pseudo_sens = TRUE,
prv_cut = 0.1,
lib_cut = 1000,
s0_perc = 0.05,
group = "Treatment",
lme_control = lme4::lmerControl(),
struc_zero = FALSE,
neg_lb = FALSE)
res_prim = output$res
library(ALDEx2)
library(phyloseq)
pseq <- PB2023_spat_not_rarefied_normalized
otu_table_matrix <- as(otu_table(pseq), "matrix")
# Transpose the OTU table matrix
otu_table_matrix <- t(otu_table_matrix)
# Extract sample data to get the group information
sample_info <- sample_data(pseq)
sample_info$Treatment <- as.factor(sample_info$Treatment)
group_vector <- sample_info$Treatment
group_vector <- as.character(group_vector)
# Perform CLR transformation and differential abundance test with ALDEx2
# 'mc.samples' is the number of Monte Carlo instances, typically set to 128 or 500
aldex_clr <- aldex.clr(otu_table_matrix, group_vector, mc.samples = 128)
aldex_results <- aldex.kw(aldex_clr)
head(aldex_results)
significant_kw <- aldex_results[aldex_results$kw.ep < 0.05, ]
significant_glm <- aldex_results[aldex_results$glm.ep < 0.05, ]
significant_kw
significant_glm
View(aldex_results)
aldex_clr
str(aldex_clr)
head(significant_glm)
# Example boxplot for one ASV
significant_asv <- c("ASV190", "265", "ASV23")  # Replace with actual significant ASV name
# Example boxplot for one ASV
significant_asv <- c("ASV190", "ASV265", "ASV23")  # Replace with actual significant ASV name
library(phyloseq)
library(ggplot2)
library(dplyr)
# Assuming 'ps' is your phyloseq object
# Melt the phyloseq object to a data frame
ps_melted <- psmelt(pseq)
# Filter for ASV9
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
asv9_data
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "Abundance of ASV9 Between Treatments",
x = "Treatment",
y = "Mean Abundance (± SE)") +
theme_minimal()
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "Abundance of ASV9 Between Treatments",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU)
summary_data
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment, OTU) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
summary_data
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "Abundance of ASV9 Between Treatments",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU)
# Assuming 'ps' is your phyloseq object
# Melt the phyloseq object to a data frame
pseq <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
ps_melted <- psmelt(pseq)
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment, OTU) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU)
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pseq <- PB2023_spat_not_rarefied_normalized
ps_melted <- psmelt(pseq)
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment, OTU) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
summary_data
head(significant_glm)
asv9_data
asv9_data
summary_data
significant_asvs <- subset(aldex_results, we.eBH < 0.05) # Adjust threshold if needed
significant_asvs <- subset(aldex_results, aldex_results$glm.ep < 0.05) # Adjust threshold if needed
significant_asvs
plot_data <- significant_asvs %>%
mutate(ASV = rownames(significant_asvs)) %>%
select(ASV, diff.btw)
# Perform CLR transformation and differential abundance test with ALDEx2
# 'mc.samples' is the number of Monte Carlo instances, typically set to 128 or 500
aldex_clr <- aldex.clr(otu_table_matrix, group_vector, mc.samples = 500)
aldex_results <- aldex.kw(aldex_clr)
significant_kw
significant_glm
significant_asv <- c("ASV190", "ASV265", "ASV23", "ASV613", "ASV953")  # Replace with actual significant ASV name
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment, OTU) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ps_melted <- psmelt(pseq)
# Filter for ASV9
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
pseq <- PB2023_spat_not_rarefied_normalized
pseq <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
ps_melted <- psmelt(pseq)
asv9_data <- ps_melted %>% filter(OTU == significant_asv)
# Calculate mean and standard error for each treatment
summary_data <- asv9_data %>%
group_by(Treatment, OTU) %>%
summarise(
mean_abundance = mean(Abundance),
se_abundance = sd(Abundance) / sqrt(n())  # Standard Error
)
# Create the plot
ggplot(summary_data, aes(x = Treatment, y = mean_abundance)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = mean_abundance - se_abundance, ymax = mean_abundance + se_abundance),
width = 0.2) +
labs(title = "",
x = "Treatment",
y = "Mean Abundance (± SE)") +
facet_wrap(~OTU) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
asv9_data
asv9_data
pseq <- PB2023_spat_not_rarefied_normalized
pseq <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
ps <- psmelt(pseq)
pseq <- PB2023_spat_not_rarefied_normalized
pseq <- subset_samples(pseq, !Treatment %in% c("Continuous Probiotics", "James"))
pseq <- microbiome::transform(pseq, "compositional")
ps <- psmelt(pseq)
filtered_ps <- ps %>%
filter(OTU %in% c("ASV190", "ASV265", "ASV23", "ASV157", "ASV1191"))
#PB2023 results
filtered_ps
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, Genus, OTU) %>%
summarise(Average_Abundance = mean(Abundance))
ggplot(average_abundance, aes(fill = Family, y = Average_Abundance, x = Treatment)) +
geom_bar(position = "stack", stat = "identity", color = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),  # Adjust y-axis title font size
legend.text = element_text(size = 12),   # Adjust legend text font size
legend.title = element_text(size = 14),
panel.border = element_blank()) +  # Adjust legend title font size
facet_wrap("OTU")
ggplot(average_abundance, aes(fill = Genus, y = Average_Abundance, x = Treatment)) +
geom_bar(position = "stack", stat = "identity", color = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),  # Adjust y-axis title font size
legend.text = element_text(size = 12),   # Adjust legend text font size
legend.title = element_text(size = 14),
panel.border = element_blank()) +  # Adjust legend title font size
facet_wrap("OTU")
filtered_ps <- ps %>%
filter(OTU %in% c("ASV190", "ASV265", "ASV23", "ASV157", "ASV1191", "ASV1032", "ASV1411"))
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, Genus, OTU) %>%
summarise(Average_Abundance = mean(Abundance))
ggplot(average_abundance, aes(fill = Genus, y = Average_Abundance, x = Treatment)) +
geom_bar(position = "stack", stat = "identity", color = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),  # Adjust y-axis title font size
legend.text = element_text(size = 12),   # Adjust legend text font size
legend.title = element_text(size = 14),
panel.border = element_blank()) +  # Adjust legend title font size
facet_wrap("OTU")
#PB2023 results
filtered_ps <- ps %>%
filter(OTU %in% c("ASV190", "ASV265", "ASV23", "ASV157", "ASV1191", "ASV1032",
"ASV275", "ASV1411", "ASV1264"))
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, Genus, OTU) %>%
summarise(Average_Abundance = mean(Abundance))
ggplot(average_abundance, aes(fill = Genus, y = Average_Abundance, x = Treatment)) +
geom_bar(position = "stack", stat = "identity", color = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),  # Adjust y-axis title font size
legend.text = element_text(size = 12),   # Adjust legend text font size
legend.title = element_text(size = 14),
panel.border = element_blank()) +  # Adjust legend title font size
facet_wrap("OTU")
filtered_ps <- ps %>%
filter(OTU %in% c("ASV1191", "ASV157", "ASV1032", "ASV1411", "ASV1264", "ASV1287",
"ASV942", "ASV1131", "ASV297", "ASV236"))
# Calculate the average abundance for each treatment group
average_abundance <- filtered_ps %>%
group_by(Treatment, Genus, OTU) %>%
summarise(Average_Abundance = mean(Abundance))
ggplot(average_abundance, aes(fill = Genus, y = Average_Abundance, x = Treatment)) +
geom_bar(position = "stack", stat = "identity", color = "black") +
scale_fill_manual(values = paired_palette) +
labs(title = "",
x = "",
y = "Average Relative Abundance",
fill = "") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.title.y = element_text(size = 14),  # Adjust y-axis title font size
legend.text = element_text(size = 12),   # Adjust legend text font size
legend.title = element_text(size = 14),
panel.border = element_blank()) +  # Adjust legend title font size
facet_wrap("OTU")
library(survival)
library(survminer)
PB2023_spat_challenge <- read.delim("~/Documents/PhD/PB2023_spat_challenge/PB2023_spat_challenge.txt")
View(PB2023_spat_challenge)
Data = PB2023_spat_challenge
head(Data)
surv_object = Surv(time=Data$TE, event=Data$Outcome)
surv_object
fit1 = survfit(surv_object~Treatment, data=Data)
summary(fit1)
plot(fit1, xlab="Survival Time in Days", color = "Treatment",
ylab="% Surviving", yscale=100,
main="Survival Distribution (Overall)")
ggsurvplot(fit1, data=Data, pval = TRUE, legend = "bottom", legend.title="Treatment", font.legend =c(9,"plain","black"))
ggsurvplot(fit1, data = Data, pval = TRUE, legend = "bottom", legend.title = "Treatment",
font.legend = c(12, "plain", "black"),
palette = color_palette, ylim = c(0.4, 1),
conf.int = FALSE,
lwd = 1.5)
plot(fit1, xlab="Survival Time in Days", color = "Treatment",
ylab="% Surviving", yscale=100,
main="Survival Distribution (Overall)")
ggsurvplot(fit1, data=Data, pval = TRUE, legend = "bottom", legend.title="Treatment", font.legend =c(9,"plain","black"))
library(survminer)
