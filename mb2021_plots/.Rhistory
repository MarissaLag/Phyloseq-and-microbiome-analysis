p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3<- p3 + geom_text(aes(label = rownames(pseq.rel)), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3<- p3 + geom_text(aes(label = rownames(pseq.rel@sam_data$Library_Name)), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p3 <- p3 + geom_text(aes(label = rownames(pseq.rel@sam_data$Library_Name)), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(aes(label = rownames(Library_Name)), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(aes(label = rownames(Metadata$Library_Name)), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p3 <- p3 + geom_text(data = Metadata, aes(label = Library_Name), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p3 <- p3 + geom_text(data = pseq.rel, aes(label = Library_Name), nudge_x = 0.1, nudge_y = 0.1, size = 3)
p3 <- p3 + geom_text(data = pseq.rel@sam_data, aes(label = Library_Name), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
pseq.rel@sam_data$Library_Name
p3 <- p3 + geom_text(data = pseq.rel@sam_data, aes(label = pseq.rel@sam_data$Library_Name), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p3 <- p3 + geom_text(data = pseq.rel, aes(label = Library_Name), nudge_x = 0.1, nudge_y = 0.1, size = 3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(data = pseq.rel, aes(label = "Library_Name"), nudge_x = 0.1, nudge_y = 0.1, size = 3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(data = pseq, aes(label = "Library_Name"), nudge_x = 0.1, nudge_y = 0.1, size = 3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(data = pseq.rel, aes(label = "Library_Name"), nudge_x = 0.1, nudge_y = 0.1, size = 3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
p3 <- p3 + geom_text(data = Metadata, aes(label = "Library_Name"), nudge_x = 0.1, nudge_y = 0.1, size = 3)
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = Library_Name) + geom_point(size = 4)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = Library.Name) + geom_point(size = 4)
View(pseq.rel@sam_data)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = "Library_Name") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = "Library_Name") + geom_point(size = 4) +
geom_text(vjust = 0, nudge_y = 0.01, size=3)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = "Library_Name") + geom_point(size = 4) +
geom_text(vjust = 0, nudge_y = 0.01, size=3)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("18 dpf", "1 dpf", "3 dpf"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = "Library_Name") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p3)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf"))
#Compositional ----
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
grid.arrange(c(p1, p2, p3, p4))
library(gridExtra)
grid.arrange(c(p1, p2, p3, p4))
grid.arrange(p1, p2, p3, p4, ncol = 2)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", label = "Library_Name") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("All Time-points")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("All Time-points")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "1 dpf", "Spat"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("18 dpf")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("18 dpf")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p2 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p2)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("All Time-points")
p <- p + theme(plot.title = element_text(hjust = 0.5))  # Add missing closing parenthesis
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)  # Add geom_encircle
print(p4)
grid.arrange(p1, p2, p3, p4, ncol = 2)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "18 dpf", "Spat"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("1 dpf")
p <- p + theme(plot.title = element_text(hjust = 0.5)) + guides(color = FALSE)
p1 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p1)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("1 dpf")
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="none")
p1 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p1)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "1 dpf", "Spat"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4, shape = 17)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("18 dpf")
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="none")
p2 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p2)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "1 dpf", "18 dpf"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment") + geom_point(size = 4, shape = 15 )
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("Spat")
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="none")
p3 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p3)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf"))
pseq.rel <- microbiome::transform(pseq, "compositional")
set.seed(4235421)
ord <- ordinate(pseq.rel, "MDS", "bray")
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("All Time-points")
p <- p + theme(plot.title = element_text(hjust = 0.5))
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p4)
grid.arrange(p1, p2, p3, p4, ncol = 2)
p <- plot_ordination(pseq.rel, ord, color = "Treatment", shape = "Age", label = "Library_Name") + geom_point(size = 4)
p <- p + scale_colour_manual(values = c("#F8766D", "#00BFC4", "#C77CFF"))
p <- p + ggtitle("All Time-points")
p <- p + theme(plot.title = element_text(hjust = 0.5))
p4 <- p + ggalt::geom_encircle(aes(fill = Treatment), expand = 0.2, alpha = 0.2)
print(p4)
grid.arrange(p1, p2, p3, p4, ncol = 2, common.legend = TRUE, legend="bottom")
library(ggpubr)
garrange(p1, p2, p3, p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
ggarrange(p1, p2, p3, p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(p4)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 1))
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
nrow=1),
mylegend, ncol=2,heights=c(10, 1))
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
nrow=1),
mylegend, ncol=2)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, ncol=2)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, ncol=1)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, ncol=2)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, nrow=2)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, nrow=1)
p_combined <- grid.arrange(
arrangeGrob(
p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
ncol = 2
),
mylegend,
ncol = 2, heights = unit.c(unit(1, "npc"), unit(0.2, "npc"))  # Adjust the heights to position the legend closer to the plots
)
p_combined <- grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
p2 + theme(legend.position="none"),
p3 + theme(legend.position="none"),
p4 + theme(legend.position="none"),
ncol=2),
mylegend, nrow=1)
ggarrange(p1, p2, p3, p4, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
ggarrange(p4, p1, p2, p3, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
pseq <- Marissa_mb2021_filtered_20240203
library(readr)
data_table_mb2021 <- read_csv("mb2021_plots/data_table_mb2021.csv")
View(data_table_mb2021)
pc_FUN <- data_table_mb2021
pc_FUN <- data_table[!data_table$Time-Point == "3 dpf", ]
pc_FUN <- pc_FUN[!pc_FUN$Time-Point == "3 dpf", ]
pc_FUN <- pc_FUN[!pc_FUN$Time-point == "3 dpf", ]
pc_FUN <- pc_FUN[!pc_FUN$Time-point == "3 dpf", ]
pc_FUN <- pc_FUN[!pc_FUN$`Time-point` == "3 dpf", ]
pc_FUN <- pc_FUN[pc_FUN$`Time-point` == "Spat", ]
pc_FUN
#Inverse data
funi_df<- t(pc_FUN)
matrix_F = pc_FUN[ ,6:585]
time_a_F = pc_FUN$Salinity.Level
### Make the equation. Saying we want to examine specific column of metadata
time_a_F = pc_FUN$`Salinity Level`
inv_F = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
results <- summary(inv_F)
View(Tax)
#save results
write.csv(results, "Spat_INVALsummary_results.csv", row.names = TRUE)
setwd("/Users/maris/Documents/GitHub/Phyloseq and microbiome analysis/mb2021_plots")
#save results
write.csv(results, "Spat_INVALsummary_results.csv", row.names = TRUE)
results <- summary(inv_F)
#save results
write.csv(results, "Spat_INVALsummary_results.csv", row.names = TRUE)
str(results)
results <- summary(inv_F)
#save results
write.csv(inv_F, "Spat_INVALsummary_results.csv", row.names = TRUE)
str(inv_F)
View(inv_F)
results <- summary(inv_F)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf"))
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
selected_rows_ASVs <- subset(pseq, Tax$Family %in% c("Vibrionaceae"))
selected_rows_ASVs <- subset(pseq, 'Family' %in% c("Vibrionaceae"))
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
pseq <- psmelt(pseq)
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
View(selected_rows_ASVs)
combined_data <- selected_rows_ASVs %>%
filter(Family %in% c("Vibrionaceae")) %>%
group_by(Age, Treatment) %>%
summarise(
Avg_Abundance = mean(Abundance),
SD_Abundance = sd(Abundance),
.groups = 'drop'
)
View(combined_data)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25
) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
View(selected_rows_ASVs)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_boxplot(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_violin(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_violin()
p
combined_data <- selected_rows_ASVs %>%
filter(Family %in% c("Vibrionaceae")) %>%
group_by(Age, Treatment) %>%
summarise(
Avg_Abundance = mean(Abundance),
SD_Abundance = sd(Abundance),
.groups = 'drop'
)
View(combined_data)
#graph
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_violin()
p
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_violin()
p
p <- ggplot(combined_data, aes(x = Age, y = Avg_Abundance, fill = Treatment)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = Avg_Abundance - SD_Abundance, ymax = Avg_Abundance + SD_Abundance),
position = position_dodge(width = 0.9),
width = 0.25) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Vibrionaceae Abundance", x = "", y = "Abundance") +
theme(plot.title = element_text(hjust = 0.5))
print(p)
View(Metadata)
MB2021_filtered <- readRDS("~/Documents/GitHub/Phyloseq and microbiome analysis/Old RDS files/MB2021_filtered.rds")
View(MP2021_filtered)
View(MB2021_filtered@sam_data)
Marissa_Oyster <- readRDS("~/Documents/GitHub/Phyloseq and microbiome analysis/Old RDS files/Marissa_Oyster.rds")
View(Marissa_Oyster@sam_data)
pseq <- Marissa_mb2021_filtered_20240203
pc_FUN <- pc_FUN[!pc_FUN$`Time-point` == "3 dpf", ]
View(pseq@sam_data)
View(MB2021_filtered)
MB2021_filtered@sam_data
Marissa_mb2021_filtered_20240203@sam_data
pseq <- Marissa_mb2021_filtered_20240203
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
pseq <- psmelt(pseq)
selected_rows_ASVs <- subset(pseq, Family %in% c("Vibrionaceae"))
View(selected_rows_ASVs)
combined_data <- selected_rows_ASVs %>%
filter(Family %in% c("Vibrionaceae")) %>%
group_by(Age, Treatment) %>%
summarise(
Avg_Abundance = mean(Abundance),
SD_Abundance = sd(Abundance),
.groups = 'drop'
)
View(combined_data)
View(Tax)
View(MB2021_filtered)
MB2021_filtered@sam_data
View(Marissa_mb2021_filtered_20240203@sam_data)
library(indicspecies)
library(ggplot2)
pseq <- Marissa_mb2021_filtered_20240203
Marissa_Oyster <- readRDS("~/Documents/GitHub/Phyloseq and microbiome analysis/Old RDS files/Marissa_Oyster.rds")
View(Marissa_Oyster@sam_data)
library(readr)
data_table_mb2021 <- read_csv("data_table_mb2021.csv")
View(data_table_mb2021)
pc_FUN <- data_table
pc_FUN <- data_table_mb2021
pc_FUN <- pc_FUN[!pc_FUN$`Time-point` == "3 dpf", ]
#Inverse data
funi_df<- t(pc_FUN)
mb2021#matrix_F = pc_FUN[ ,6:585]
time_a_F = pc_FUN$`Salinity Level`
inv_F = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
### Run test
inv_F = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
### Make the equation. Saying we want to examine specific column of metadata
time_a_F = pc_FUN$`Salinity Level`
### Run test
inv_F = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
matrix_F = pc_FUN[ ,6:585]
### Make the equation. Saying we want to examine specific column of metadata
time_a_F = pc_FUN$`Salinity Level`
### Run test
inv_F = multipatt(matrix_F, time_a_F, func = "r.g", control = how(nperm=9999))
results <- summary(inv_F)
View(pseq@tax_table)
trt_a_F = pc_FUN$`Time-point`
Just_trt_inv_F = multipatt(matrix_F, trt_a_F, func = "r.g", control = how(nperm=9999))
Just_trt_inv_F = multipatt(matrix_F, trt_a_F, func = "r.g", control = how(nperm=9999))
trt_a_F = pc_FUN$`Time-point`
Just_trt_inv_F = multipatt(matrix_F, trt_a_F, func = "r.g", control = how(nperm=9999))
matrix_F = pc_FUN[ ,6:585]
trt_a_F = pc_FUN$`Time-point`
Just_trt_inv_F = multipatt(matrix_F, trt_a_F, func = "r.g", control = how(nperm=9999))
trt_a_F = pc_FUN$`Time-point`
Just_trt_inv_F = multipatt(matrix_F, trt_a_F, func = "r.g", control = how(nperm=9999))
