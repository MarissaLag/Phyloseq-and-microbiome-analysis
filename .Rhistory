panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = Treatment)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
#scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
sorted_indices <- sort(significant_asvs_indices_day1, decreasing = FALSE)
# Prepend "ASV" to each value in the list
significant_asvs_names <- paste("ASV", sorted_indices, sep = "")
print(significant_asvs_names)
output <- ps %>%
filter(FeatureID %in% significant_asvs_names) %>%
group_by(Treatment, FeatureID, Family.x, Order, Phylum, Class) %>%
mutate(Log_Abundance = log(value))%>%
arrange(match(FeatureID, significant_asvs_names))
View(output)
output$FeatureID <- factor(output$FeatureID, levels = unique(output$FeatureID))
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = Treatment)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
#scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
output$condition <- factor(output$condition, levels = unique(output$condition))
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = Treatment)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
#scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
output$FeatureID <- factor(output$FeatureID, levels = unique(output[order(output$condition), "FeatureID"]))
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = Treatment)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
#scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
output$FeatureID <- factor(output$FeatureID, levels = unique(output$FeatureID))
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = Treatment)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
#scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CH" = 4, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
output <- ps %>%
filter(FeatureID %in% significant_asvs_names) %>%
group_by(Treatment, FeatureID, Family.x, Order, Phylum, Class) %>%
mutate(Log_Abundance = log(value))%>%
arrange(match(FeatureID, significant_asvs_names))
View(output)
str(output)
significant_asvs_indices_day1 <- c(119, 244, 192, 341, 510, 240, 428, 76, 450, 468,
484, 579, 385, 116, 199, 290, 54, 114, 60, 149, 339,
300, 200, 373, 326, 193, 659, 609, 318, 524, 102, 179,
232, 38, 641, 150, 131, 92, 130, 257, 34, 499, 394)
sorted_indices <- sort(significant_asvs_indices_day1, decreasing = FALSE)
significant_asvs_names <- paste("ASV", sorted_indices, sep = "")
print(significant_asvs_names)
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "18 dpf", "Spat"))
ps <- psmelt2(pseq) #long format
match_result <- match(ps$FeatureID, inv_F_sign_df$Feature_ID)
ps$condition <- ifelse(is.na(match_result), NA, inv_F_sign_df$condition[match_result])
output <- ps %>%
filter(FeatureID %in% significant_asvs_names) %>%
group_by(Treatment, FeatureID, Family.x, Order, Phylum, Class) %>%
mutate(Log_Abundance = log(value))%>%
arrange(match(FeatureID, significant_asvs_names))
View(output)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
mycolors <- colorRampPalette(brewer.pal(8, "Set3"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(8, "Dark"))(nb.cols)
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Class, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Class, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Class, shape = condition)) +
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Class, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
nb.cols <- 20
mycolors <- colorRampPalette(brewer.pal(8, "Set1"))(nb.cols)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Class, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_classic() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 2, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 8)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 3) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 5) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Order, shape = condition)) +
geom_point(size = 5) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
debugSource("~/Documents/GitHub/Phyloseq and microbiome analysis/inval_tutorial/INVAL_TUTORIAL_FOR_MICROBIOME_2023.R")
install.packages("indicspecies")
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Phylum, shape = condition)) +
geom_point(size = 5) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 5) +
theme_bw() +
facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
ggplot(output, aes(x = FeatureID, y = Log_Abundance, color = Family.x, shape = condition)) +
geom_point(size = 5) +
theme_bw() +
#facet_grid(~Treatment) +
scale_color_manual(values=mycolors) +
scale_shape_manual(values = c("C" = 6, "H" = 17, "L" = 6, "CL" = 6, "HL" = 1)) +  # Custom shapes for each condition
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position = "right",
#axis.text.x = element_text(size=7, angle=45, hjust=1),
legend.text = element_text(size = 7)
)
View(output)
debugSource("~/Documents/GitHub/Phyloseq and microbiome analysis/inval_tutorial/INVAL_TUTORIAL_FOR_MICROBIOME_2023.R")
install.packages("indicspecies")
significant_asvs_indices_spat <- c(333, 507, 580, 494, 656, 371, 373, 623, 227, 283, 332, 571, 662, 385, 314, 380)
sorted_indices <- sort(significant_asvs_indices_spat, decreasing = FALSE)
significant_asvs_names <- paste("ASV", sorted_indices, sep = "")
print(significant_asvs_names)
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "18 dpf", "1 dpf"))
pseq<- Marissa_mb2021_filtered_20240203
pseq <- subset_samples(pseq, !Age %in% c("3 dpf", "18 dpf", "1 dpf"))
ps <- psmelt2(pseq) #long format
inv_F_spat$sign$Feature_ID <- row.names(inv_F_spat$sign)
View(inv_F_spat$sign)
inv_F_sign_df <- data.frame(
Feature_ID = inv_F_spat$Feature_ID,
p.value = inv_F_spat$sign$p.value,
s.Control = inv_F_spat$sign$s.Control,
s.High = inv_F_spat$sign$s.High,
s.Low = inv_F_spat$sign$s.Low
)
View(inv_F_spat$sign)
inv_F_sign_df <- data.frame(
Feature_ID = inv_F_spat$Feature_ID,
p.value = inv_F_spat$sign$p.value,
s.Control = inv_F_spat$sign$s.Control,
s.High = inv_F_spat$sign$s.High,
s.Low = inv_F_spat$sign$s.Low
)
debugSource("~/Documents/GitHub/Phyloseq and microbiome analysis/inval_tutorial/INVAL_TUTORIAL_FOR_MICROBIOME_2023.R")
install.packages("indicspecies")
