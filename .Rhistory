group_by(Treatment, OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup()
# Create the heatmap using ggplot2 with faceting
ggplot(heatmap_data_ggplot, aes(x = Age, y = OTU, fill = Mean_Abundance)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "skyblue2", mid = "white", high = "red", midpoint = 0) +
facet_wrap(~Treatment, scales = "free_y") +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.background = element_rect(fill = "white", color = "black"),
strip.text = element_text(face = "bold", size = 12)
) +
labs(
title = "Microbiome Changes Across Time by Treatment",
x = "Age",
y = "OTU"
)
combined_heatmap_data <- prune_psmelt %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
combined_heatmap_matrix <- as.matrix(combined_heatmap_data[, -1])
rownames(combined_heatmap_matrix) <- combined_heatmap_data$OTU
combined_heatmap_matrix_scaled <- t(scale(t(combined_heatmap_matrix)))
combined_heatmap_matrix_scaled[is.na(combined_heatmap_matrix_scaled)] <- 0
row_hclust <- hclust(dist(combined_heatmap_matrix_scaled), method = "complete")
# Extract row order
ordered_otus <- rownames(combined_heatmap_matrix_scaled)[row_hclust$order]
# Step 2: Generate heatmaps for each treatment with consistent row order
treatment_list <- split(prune_psmelt, prune_psmelt$Treatment)
for (treatment_name in names(treatment_list)) {
treatment_data <- treatment_list[[treatment_name]] %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
heatmap_matrix <- as.matrix(treatment_data[, -1])
rownames(heatmap_matrix) <- treatment_data$OTU
heatmap_matrix_scaled <- t(scale(t(heatmap_matrix)))
heatmap_matrix_scaled[is.na(heatmap_matrix_scaled)] <- 0
heatmap_matrix_scaled <- heatmap_matrix_scaled[ordered_otus, , drop = FALSE]
# Generate the heatmap
pheatmap(
heatmap_matrix_scaled,
cluster_rows = FALSE,  # Keep consistent row order
cluster_cols = FALSE,  # No clustering on columns
show_rownames = FALSE,  # Optionally hide row names
main = paste("Treatment:", treatment_name),
angle_col = 0,
fontsize_col = 13
)
}
combined_heatmap_data <- prune_psmelt %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
combined_heatmap_matrix <- as.matrix(combined_heatmap_data[, -1])
rownames(combined_heatmap_matrix) <- combined_heatmap_data$OTU
combined_heatmap_matrix_scaled <- t(scale(t(combined_heatmap_matrix)))
combined_heatmap_matrix_scaled[is.na(combined_heatmap_matrix_scaled)] <- 0
# Perform hierarchical clustering to determine global row order
row_hclust <- hclust(dist(combined_heatmap_matrix_scaled), method = "complete")
ordered_otus <- rownames(combined_heatmap_matrix_scaled)[row_hclust$order]
# Split data by treatment
treatment_list <- split(prune_psmelt, prune_psmelt$Treatment)
# Generate heatmaps for each treatment
heatmap_plots <- list()  # Store each heatmap for later use
for (treatment_name in names(treatment_list)) {
treatment_data <- treatment_list[[treatment_name]] %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
heatmap_matrix <- as.matrix(treatment_data[, -1])
rownames(heatmap_matrix) <- treatment_data$OTU
heatmap_matrix_scaled <- t(scale(t(heatmap_matrix)))
heatmap_matrix_scaled[is.na(heatmap_matrix_scaled)] <- 0
# Reorder rows based on global clustering
heatmap_matrix_scaled <- heatmap_matrix_scaled[ordered_otus, , drop = FALSE]
# Generate the heatmap
heatmap <- pheatmap(
heatmap_matrix_scaled,
cluster_rows = FALSE,  # Keep consistent row order
cluster_cols = FALSE,  # No clustering on columns
show_rownames = FALSE,  # Optionally hide row names
main = paste("Treatment:", treatment_name),
angle_col = 0,
fontsize_col = 13
)
# Save the heatmap in a list for later use
heatmap_plots[[treatment_name]] <- heatmap
}
View(heatmap_plots)
str(heatmap_plots)
pseq <- MU42022_filtered_Oct92024
prune_psmelt <- psmelt(pseq_filt)
# Step 1: Create a combined dataset for clustering
combined_heatmap_data <- prune_psmelt %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
combined_heatmap_matrix <- as.matrix(combined_heatmap_data[, -1])
rownames(combined_heatmap_matrix) <- combined_heatmap_data$OTU
combined_heatmap_matrix_scaled <- t(scale(t(combined_heatmap_matrix)))
combined_heatmap_matrix_scaled[is.na(combined_heatmap_matrix_scaled)] <- 0
# Perform hierarchical clustering
row_hclust <- hclust(dist(combined_heatmap_matrix_scaled), method = "complete")
# Extract row order
ordered_otus <- rownames(combined_heatmap_matrix_scaled)[row_hclust$order]
# Step 2: Generate heatmaps for each treatment with consistent row order
treatment_list <- split(prune_psmelt, prune_psmelt$Treatment)
for (treatment_name in names(treatment_list)) {
treatment_data <- treatment_list[[treatment_name]] %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
heatmap_matrix <- as.matrix(treatment_data[, -1])
rownames(heatmap_matrix) <- treatment_data$OTU
heatmap_matrix_scaled <- t(scale(t(heatmap_matrix)))
heatmap_matrix_scaled[is.na(heatmap_matrix_scaled)] <- 0
# Reorder rows based on the determined order
heatmap_matrix_scaled <- heatmap_matrix_scaled[ordered_otus, , drop = FALSE]
# Generate the heatmap
pheatmap(
heatmap_matrix_scaled,
cluster_rows = FALSE,  # Keep consistent row order
cluster_cols = FALSE,  # No clustering on columns
show_rownames = FALSE,  # Optionally hide row names
main = paste("Treatment:", treatment_name),
angle_col = 0,
fontsize_col = 13
)
}
combined_heatmap_data <- prune_psmelt %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
combined_heatmap_matrix <- as.matrix(combined_heatmap_data[, -1])
rownames(combined_heatmap_matrix) <- combined_heatmap_data$OTU
combined_heatmap_matrix_scaled <- t(scale(t(combined_heatmap_matrix)))
combined_heatmap_matrix_scaled[is.na(combined_heatmap_matrix_scaled)] <- 0
# Perform hierarchical clustering to determine global row order
row_hclust <- hclust(dist(combined_heatmap_matrix_scaled), method = "complete")
ordered_otus <- rownames(combined_heatmap_matrix_scaled)[row_hclust$order]
# Split data by treatment
treatment_list <- split(prune_psmelt, prune_psmelt$Treatment)
# Generate heatmaps for each treatment
heatmap_plots <- list()  # Store each heatmap for later use
for (treatment_name in names(treatment_list)) {
treatment_data <- treatment_list[[treatment_name]] %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
heatmap_matrix <- as.matrix(treatment_data[, -1])
rownames(heatmap_matrix) <- treatment_data$OTU
heatmap_matrix_scaled <- t(scale(t(heatmap_matrix)))
heatmap_matrix_scaled[is.na(heatmap_matrix_scaled)] <- 0
# Reorder rows based on global clustering
heatmap_matrix_scaled <- heatmap_matrix_scaled[ordered_otus, , drop = FALSE]
# Generate the heatmap
heatmap <- pheatmap(
heatmap_matrix_scaled,
cluster_rows = FALSE,  # Keep consistent row order
cluster_cols = FALSE,  # No clustering on columns
show_rownames = FALSE,  # Optionally hide row names
main = paste("Treatment:", treatment_name),
angle_col = 0,
fontsize_col = 13
)
# Save the heatmap in a list for later use
heatmap_plots[[treatment_name]] <- heatmap
}
for (treatment_name in names(heatmap_plots)) {
ggsave(
filename = paste0("heatmap_", treatment_name, ".png"),
plot = heatmap_plots[[treatment_name]],
width = 10,
height = 8
)
}
getwd()
setwd("~/Documents/GitHub/Phyloseq and microbiome analysis")
for (treatment_name in names(heatmap_plots)) {
ggsave(
filename = paste0("heatmap_", treatment_name, ".png"),
plot = heatmap_plots[[treatment_name]],
width = 10,
height = 8
)
}
treatment_list
pseq <- MU42022_filtered_Oct92024
#Merge ASv data for each time point
#Convert to relative comp
pseq_filt <- microbiome::transform(pseq, "compositional")
prune_psmelt <- psmelt(pseq_filt)
combined_heatmap_data <- prune_psmelt %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
combined_heatmap_matrix <- as.matrix(combined_heatmap_data[, -1])
rownames(combined_heatmap_matrix) <- combined_heatmap_data$OTU
combined_heatmap_matrix_scaled <- t(scale(t(combined_heatmap_matrix)))
combined_heatmap_matrix_scaled[is.na(combined_heatmap_matrix_scaled)] <- 0
# Perform hierarchical clustering to determine global row order
row_hclust <- hclust(dist(combined_heatmap_matrix_scaled), method = "complete")
ordered_otus <- rownames(combined_heatmap_matrix_scaled)[row_hclust$order]
# Split data by treatment
treatment_list <- split(prune_psmelt, prune_psmelt$Treatment)
# Generate heatmaps for each treatment
heatmap_plots <- list()  # Store each heatmap for later use
for (treatment_name in names(treatment_list)) {
treatment_data <- treatment_list[[treatment_name]] %>%
group_by(OTU, Age) %>%
summarize(Mean_Abundance = mean(Abundance, na.rm = TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = Age, values_from = Mean_Abundance, values_fill = 0)
# Convert to matrix and scale
heatmap_matrix <- as.matrix(treatment_data[, -1])
rownames(heatmap_matrix) <- treatment_data$OTU
heatmap_matrix_scaled <- t(scale(t(heatmap_matrix)))
heatmap_matrix_scaled[is.na(heatmap_matrix_scaled)] <- 0
# Reorder rows based on global clustering
heatmap_matrix_scaled <- heatmap_matrix_scaled[ordered_otus, , drop = FALSE]
# Generate the heatmap
heatmap <- pheatmap(
heatmap_matrix_scaled,
cluster_rows = FALSE,  # Keep consistent row order
cluster_cols = FALSE,  # No clustering on columns
show_rownames = FALSE,  # Optionally hide row names
main = paste("Treatment:", treatment_name),
angle_col = 0,
fontsize_col = 13
)
# Save the heatmap in a list for later use
heatmap_plots[[treatment_name]] <- heatmap
}
for (treatment_name in names(heatmap_plots)) {
ggsave(
filename = paste0("heatmap_", treatment_name, ".png"),
plot = heatmap_plots[[treatment_name]],
width = 10,
height = 8
)
}
for (treatment_name in names(heatmap_plots)) {
ggsave(
filename = paste0("heatmap_", treatment_name, ".pdf"),
plot = heatmap_plots[[treatment_name]],
width = 10,
height = 8
)
}
MU42022_counts_R_USE <- read.delim2("~/Documents/MSc/MU42022 larval counts/MU42022_counts_R_USE.txt")
View(MU42022_counts_R_USE)
library(dplyr)
#install.packages("datarium")
library("datarium")
#install.packages("tidyverse")
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)
library(rstatix)
#install.packages("ggResidpanel")
library(ggResidpanel)
#install.packages("DHARMa")
library(DHARMa)
#install.packages("lme4")
library(lme4)
#install.packages("fitdistrplus")
library(fitdistrplus)
library(ggplot2)
#install.packages("hrbrthemes")
library(hrbrthemes)
library(tidyr)
#install.packages("viridis")
library(viridis)
library(car)
#install.packages("agricolae")
library(agricolae)
#install.packages("mgcv")
library(mgcv)
#install.packages("glmmTMB")
library(glmmTMB)
install.packages("mgcViz")
library(mgcViz)
install.packages("mgcViz")
MU42022_counts_R_USE <- read.delim2("~/Documents/MSc/MU42022 larval counts/MU42022_counts_R_USE.txt")
View(MU42022_counts_R_USE)
Data <- MU42022_counts_R_USE
Data <- Data %>%
filter(!Treatment %in% c("Antibiotics", "Antibiotics + HT"))
#Since tanks may be stocked differently, remove day 0
Data <- Data %>%
filter(!Day %in% c("0"))
str(Data)
Data$Day <- as.numeric(Data$Day)
Data$Treatment <- as.factor(Data$Treatment)
#Data$Diet <- as.factor(Data$Diet)
Data$Tank <- as.factor(Data$Tank)
Data$Family <- as.factor(Data$Family)
#Data$Size <- as.numeric(Data$Size)
# Remove commas and convert to numeric
Data$Count <- as.numeric(gsub(",", "", Data$Count))
str(Data)
Data$Treatment <- relevel(Data$Treatment, ref = "Control")
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Treatment + Family, data = Data)
summary(model_gam)
plot(model_gam)
gam.check(model_gam)
plot(model_gam, pages = 1, shade = TRUE)
concurvity(model_gam, full = TRUE)
simulation_output <- simulateResiduals(model_gam) #Does not look like a good fit
plot(simulation_output)
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
vis.gam(model_gam,
type = 'response',
plot.type = 'persp',
color = "heat",
contour.col = "black",
axes = TRUE,
ticktype = "detailed",
theta = 0, phi = 50
)
bt.smooth.plot <- getViz(model_gam)
print(plot(bt.smooth.plot), ask = FALSE)
plot(bt.smooth.plot) + l_dens(type = "cond") + l_fitLine() + l_ciLine()
AIC(model_gam)
model_1 <- gam(Count ~ s(Day, by=Family,k=4) + Treatment + Family, data = Data)
summary(model_1)
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + Treatment + Family, data = Data)
summary(model_gam)
Mod4 <- gamm4(Count ~ s(Day, by = Treatment, k = 4) + Treatment,
random = ~(1 | Family),
data = Data,
family = gaussian(link = "identity"))
library(gamm4)
Mod_random <- gam(Count ~ s(Day, by=Treatment,k=4) + Treatment + s(Family, bs=“re”), data = Data)
Mod_random <- gam(Count ~ s(Day, by=Treatment,k=4) + Treatment + s(Family, bs="re"), data = Data)
Data
#random effect
str(Data)
Mod_random <- gam(Count ~ s(Day, by=Treatment,k=4) + Treatment + s(Family, bs="re"), data = Data)
model_interaction <- gam(Count ~ s(Day, by=Treatment,k=4) + Treatment* Family, data = Data)
summary(model_interaction)
plot(model_interaction)
plot(model_interaction, pages = 1, shade = TRUE)
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
summary(model_gam -1)
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Treatment + Family -1, data = Data)
summary(model_gam)
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Treatment -1 + Family -1, data = Data)
summary(model_gam)
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Treatment*Family -1, data = Data)
summary(model_gam)
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
#Add legend
library(mgcViz)
set.seed(0)
dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
model_gam <- gam(y ~ s(x0, x1), data = dat)
# Visualize the model
p <- vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
# Convert to ggplot
p_gg <- plot(p) +
labs(fill = "Response") + # Add legend title
theme_minimal() # Customize theme
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Treatment*Family -1, data = Data)
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
vis.gam(model_gam,
type = 'response',
plot.type = 'persp',
color = "heat",
contour.col = "black",
axes = TRUE,
ticktype = "detailed",
theta = 0, phi = 50
)
plot(model_gam, pages = 1, shade = TRUE)
model_gam <- gam(Count ~ s(Day, by=Treatment,k=4) + s(Day, by=Family,k=4) + Family*Treatment -1, data = Data)
summary(model_gam)
plot(model_gam)
plot(model_gam)
plot(model_gam, pages = 1, shade = TRUE)
vis.gam(model_gam,
type = 'response',
plot.type = 'contour',
color = "heat",
contour.col = "black")
library(gamm4)
Mod4 <- gamm4(Count ~ s(Day, by = Treatment, k = 4) + Treatment,
random = ~(1 | Family),
data = Data,
family = gaussian(link = "identity"))
summary(Mod4$gam)
summary(Mod4$mer)
plot(Mod4$gam)
#Plot smooth terms
plot(Mod4$gam, pages = 1, shade = TRUE)
gam.check(Mod4$gam) #signficant p-values - but k cannot be increased
residuals_mod4 <- residuals(Mod4$mer)
fitted_values_mod4 <- fitted(Mod4$mer)
abline(h = 0, col = "red")
#DHARma package
simulation_output <- simulateResiduals(Mod4$mer)
#DHARma package
simulation_output <- simulateResiduals(Mod4$gam)
#DHARma package
simulation_output <- simulateResiduals(Mod4$mer)
#Visualize smooth interactions
vis.gam(model_gam, type = 'response', plot.type = 'contour')
#Visualize smooth interactions
vis.gam(model_gam, type = 'response', plot.type = 'contour', colour = "black")
#Visualize smooth interactions
vis.gam(model_gam, type = 'response', plot.type = 'contour', contour.col = "black")
vis.gam(model_gam, type = 'response', plot.type = 'contour', contour.col = "black")
fac<-rep(1:4,20)
x<-runif(80)
y<-fac+2*x^2+rnorm(80)*0.1
fac<-factor(fac)
b<-gam(y~fac+s(x))
vis.gam(b,theta=-35,color="heat")
vis.gam(model_gam, plot.type = 'contour', contour.col = "black")
vis.gam(model_gam, theta=-35,color="heat")
vis.gam(Mod4, theta=-35,color="heat")
#Visualize smooth interactions
vis.gam(Mod4$gam, type = 'response', plot.type = 'contour', contour.col = "black")
par(mfrow = c(2, 2))
plot(Mod4$gam, residuals = TRUE, pch = 16, cex = 0.5)
residuals <- resid(Mod4$mer)
fitted_values <- fitted(Mod4$mer)
# Residuals vs Fitted values
plot(fitted_values, residuals, pch = 16, xlab = "Fitted values", ylab = "Residuals")
abline(h = 0, col = "red")
# Histogram of residuals
hist(residuals, breaks = 30, main = "Residuals", xlab = "Residuals")
# Normal Q-Q Plot
qqnorm(residuals)
qqline(residuals, col = "red")
# Extracting residuals and fitted values
residuals_mod4 <- residuals(Mod4$mer)
fitted_values_mod4 <- fitted(Mod4$mer)
plot(fitted_values_mod4, residuals_mod4,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
plot(fitted_values_mod4, residuals_mod4,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
# Plotting
plot(fitted_values_mod4, residuals_mod4,
xlab = "Fitted Values",
ylab = "Residuals",
main = "Residuals vs Fitted")
residuals <- resid(Mod4$mer)
fitted_values <- fitted(Mod4$mer)
# Residuals vs Fitted values
plot(fitted_values, residuals, pch = 16, xlab = "Fitted values", ylab = "Residuals")
abline(h = 0, col = "red")
# Histogram of residuals
hist(residuals, breaks = 30, main = "Residuals", xlab = "Residuals")
# Normal Q-Q Plot
qqnorm(residuals)
bt.smooth.plot <- getViz(model_gam)
vis.gam(model_gam, type = 'response', plot.type = 'contour', contour.col = "black")
