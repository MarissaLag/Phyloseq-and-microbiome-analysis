pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 06")
p.shannon <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon <- p.shannon + theme(legend.position = "none")
p.shannon
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 15")
p.shannon <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon <- p.shannon + theme(legend.position = "none")
p.shannon
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Spat")
p.shannon <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon <- p.shannon + theme(legend.position = "none")
p.shannon
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 01")
p.shannon1 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon1 <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon1 <- p.shannon + theme(legend.position = "none")
p.shannon1
#Day 3 only ----
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 03")
p.shannon3 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon3 <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon3 <- p.shannon + theme(legend.position = "none")
p.shannon3
#Day 6 only ----
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 06")
p.shannon6 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon6 <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon6 <- p.shannon + theme(legend.position = "none")
p.shannon6
#Day 15 only ----
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 15")
p.shannon15 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon15 <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon15 <- p.shannon + theme(legend.position = "none")
p.shannon15
#Spat only ----
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Spat")
p.shannons <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p.shannon1, p.shannon2, p.shannon3, p.shannons, ncol = 2)
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons ncol = 2)
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons, ncol = 2)
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons, ncol = 1)
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons, ncol = 2)
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16),
)
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16),
title = "Spat"
)
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16)
)
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = c("Spat", position = centered) +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16)
)
)
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16) +
ggtitle("Spat", center = TRUE)
)
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16)) +
ggtitle("Spat", center = TRUE)
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5)) +  # Adjust hjust to center the title
ggtitle("Spat")
p.shannon
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16),
plot.title = element_text(size = 20, hjust = 0.5))
p.shannon
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
p.shannons <- p.shannon + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 20, hjust = 0.5))
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Spat")
p.shannons <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannons <- p.shannons + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 20, hjust = 0.5))
p.shannons <- p.shannon + theme(legend.position = "none")
p.shannons
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Spat")
p.shannons <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannons <- p.shannons + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 20, hjust = 0.5))
p.shannons <- p.shannons + theme(legend.position = "none")
p.shannons
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Spat")
p.shannons <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannons <- p.shannons + theme_classic() +
labs(x="", y="Shannon diversity", title = "Spat") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannons <- p.shannons + theme(legend.position = "none")
p.shannons
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons, ncol = 2)
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 15")
p.shannon15 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon15 <- p.shannon15 + theme_classic() +
labs(x="", y="Shannon diversity", title = "Day 15") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannon15 <- p.shannon + theme(legend.position = "none")
p.shannon15
p.shannon15 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon15 <- p.shannon15 + theme_classic() +
labs(x="", y="Shannon diversity", title = "Day 15") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannon15 <- p.shannon15 + theme(legend.position = "none")
p.shannon15
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 06")
p.shannon6 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon6 <- p.shannon6 + theme_classic() +
labs(x="", y="Shannon diversity", title = "Day 6") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannon6 <- p.shannon6 + theme(legend.position = "none")
p.shannon6
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 03")
p.shannon3 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon3 <- p.shannon3 + theme_classic() +
labs(x="", y="Shannon diversity", title = "Day 3") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannon3 <- p.shannon3 + theme(legend.position = "none")
p.shannon3
pseq_filtered <- subset_samples(pseq, !Sample.type %in% c("Algae"))
pseq_Day1 <- subset_samples(pseq_filtered, Age %in% "Day 01")
p.shannon1 <- boxplot_alpha(pseq_Day1,
index = "shannon",
x_var = "Treatment"
)
p.shannon1 <- p.shannon1 + theme_classic() +
labs(x="", y="Shannon diversity", title = "Day 1") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=12),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
plot.title = element_text(size = 12, hjust = 0.5))
p.shannon1 <- p.shannon1 + theme(legend.position = "none")
p.shannon1
grid.arrange(p.shannon1, p.shannon3, p.shannon6, p.shannon15, p.shannons, ncol = 2)
library("devtools")
library(phyloseq)
library(microbiome)
#Load data ----
pseq <-  Marissa_MU42022_rare
Marissa_MU42022_rare <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022_rare.rds")
pseq <-  Marissa_MU42022_rare
#Create objects ----
OTU = pseq@otu_table
Tax = pseq@tax_table
Metadata = pseq@sam_data
Tree = pseq@phy_tree
View(OTU)
View(Tax)
View(OTU)
pseq.core <- microbiome::transform(pseq.core, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 90/100)
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
pseq_gen <- microbiome::aggregate_rare(pseq, level = "Genus", detection = 50/100, prevalence = 70/100)
#convert to compositional data
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq.phy.rel <- microbiome::transform(pseq_phy, "compositional")
pseq.gen.rel <- microbiome::transform(pseq_gen, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 90/100)
pseq.core <- microbiome::transform(pseq.core, "compositional")
pseq.core
View(pseq.core$otu_table)
View(pseq.core)
pseq.core@otu_table
plot_ordination(pseq.core, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
set.seed(4235421)
ord <- ordinate(pseq.core, "MDS", "bray")
plot_ordination(pseq.core, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
pseq_core_filtered <- subset_samples(pseq.core, Age %in% c("Spat", "Day03", "Day06", "Day15")))
pseq_core_filtered <- subset_samples(pseq.core, Age %in% c("Spat", "Day03", "Day06", "Day15"))
plot_ordination(pseq_core_filtered, ord, color = "Treatment") + geom_point(size = 4)
top5P = subset_taxa(pseq_core_filtered, Phylum %in% names(top5P.names))
plot_bar(pseq_core_filtered, fill="Phylum")
View(pseq_core_filtered)
library(ggplot2)
ggplot(pseq_core_filtered, aes(x = Treatment, y = ASV)) +
geom_point(shape = 21, fill = "blue", color = "black", alpha = 0.7) +
scale_size_continuous(range = c(3, 10)) +  # Adjust the size range as needed
labs(x = "X-axis Label", y = "Y-axis Label", title = "Bubble Plot") +
theme_minimal()
bubble_data <- as.data.frame(pseq_core_filtered)
asv_data <- phyloseq::otu_table(pseq_core_filtered)
sample_data <- phyloseq::sample_data(pseq_core_filtered)
bubble_data <- data.frame(
ASV = asv_data$ASV,           # Replace with the actual ASV data
Treatment = sample_data$Treatment  # Replace with the actual Treatment data
)
View(pseq_core_filtered)
str(pseq_core_filtered)
otu_table <- pseq_core_filtered@otu_table@.Data
# Extract sample data (you can choose the columns you need)
sample_data <- pseq_core_filtered@sam_data
bubble_data <- data.frame(
Treatment = sample_data$Treatment,
ASV = rownames(otu_table),  # Assuming ASV labels are row names
Size = colSums(otu_table)  # Calculate a size metric (you may need to customize this)
)
core_data <- data.frame(
Treatment = sample_data$Treatment,
ASV = rownames(otu_table),  # Assuming ASV labels are row names
Size = colSums(otu_table)  # Calculate a size metric (you may need to customize this)
)
sample_sums <- rowSums(otu_table)
# Create a data frame for the bubble plot
bubble_data <- data.frame(
Treatment = sample_data$Treatment,
SampleID = rownames(otu_table),
Size = sample_sums
)
core_data <- data.frame(
Sample = sample_data,
ASV = rownames(otu_table),  # Assuming ASV labels are row names
Size = colSums(otu_table)  # Calculate a size metric (you may need to customize this)
)
core_data <- data.frame(
Sample = sample_data,
ASV = rownames(otu_table)  # Calculate a size metric (you may need to customize this)
)
pseq_core_filtered@otu_table
getwd()
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/mb2021_phyloseq.csv"
write.csv(pseq_core_filtered@otu_table, file = file_path)
if (file.exists(file_path)) {
cat("OTU table CSV file has been created:", file_path, "\n")
} else {
cat("Failed to create the CSV file.")
}
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core.csv"
# Write the otu_table to a CSV file
write.csv(pseq_core_filtered@otu_table, file = file_path)
library(readr)
mb2021_phyloseq <- read_csv("~/GitHub/mb2021_phyloseq.csv")
View(mb2021_phyloseq)
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core_sam.csv"
write.csv(pseq_core_filtered@sam_table, file = file_path)
View(pseq_core_filtered)
pseq_core_filtered <- subset_samples(pseq.core, Age %in% c("Spat", "Day03", "Day06", "Day15"))
View(pseq_core_filtered)
pseq_core_filtered <- subset_samples(pseq.core, !Age %in% c("Spat", "Day03", "Day06", "Day15"))
pseq_core_filtered@sam_data[["Age"]]
pseq_core_filtered <- subset_samples(pseq.core, !Age %in% c("Spat", "Day 03", "Day 06", "Day 15"))
pseq_core_filtered <- subset_samples(pseq.core, !Sample.type %in% "Algae")
pseq_core_filtered <- subset_samples(pseq.core, !Age %in% c("Spat", "Day 03", "Day 06", "Day 15"))
pseq_core_filtered <- subset_samples(pseq_core_filtered, !Sample.type %in% "Algae")
ord <- ordinate(pseq.core, "MDS", "bray")
plot_ordination(pseq_core_filtered, ord, color = "Treatment") + geom_point(size = 4)
ord <- ordinate(pseq_core_filtered, "MDS", "bray")
plot_ordination(pseq_core_filtered, ord, color = "Treatment") + geom_point(size = 4)
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core.csv"
# Write the otu_table to a CSV file
write.csv(pseq_core_filtered@otu_table, file = file_path)
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core.csv"
# Write the otu_table to a CSV file
write.csv(pseq_core_filtered@otu_table, file = file_path)
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core.csv"
# Write the otu_table to a CSV file
write.csv(pseq_core_filtered@otu_table, file = file_path)
file_path <- "C:/Users/maris/OneDrive/Documents/GitHub/pseq_core_sam.csv"
write.csv(pseq_core_filtered@sam_table, file = file_path)
View(Marissa_MU42022_rare)
Marissa_MU42022_rare@sam_data
library(readr)
pseq_core <- read_csv("~/GitHub/pseq_core.csv")
View(pseq_core)
library(ggplot2)
View(pseq_core)
pseq_core %>%
ggplot( aes(x=Treatment, y=ASV, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
pseq_core %>%
ggplot( aes(x=Treatment, y=ASV, fill=name)) +
geom_boxplot()
pseq_core %>%
ggplot() +
geom_violin()
library(readr)
pseq_core <- read_csv("~/GitHub/pseq_core.csv")
View(pseq_core)
ggplot(data, aes(x=Treatment, y=Family, size = Abundance)) +
geom_point(alpha=0.7)
ggplot(pseq_core, aes(x=Treatment, y=Family, size = Abundance)) +
geom_point(alpha=0.7)
pseq_core_filtered <- subset_samples(pseq.core, !Age %in% c("Spat", "Day 03", "Day 06", "Day 15"))
pseq_core_filtered <- subset_samples(pseq_core_filtered, !Sample.type %in% "Algae")
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
pseq_gen <- microbiome::aggregate_rare(pseq, level = "Genus", detection = 50/100, prevalence = 70/100)
#convert to compositional data
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq.phy.rel <- microbiome::transform(pseq_phy, "compositional")
pseq.gen.rel <- microbiome::transform(pseq_gen, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 90/100)
pseq.core <- microbiome::transform(pseq.core, "compositional")
pseq <- subset_samples(pseq.core, !Age %in% c("Spat", "Day 03", "Day 06", "Day 15"))
pseq_ <- subset_samples(pseq, !Sample.type %in% "Algae")
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
