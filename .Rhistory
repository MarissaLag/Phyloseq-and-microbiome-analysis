theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Spat") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
spat
library(gridExtra)
grid.arrange(day1, spat, ncol = 2)
spat <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = ASV)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_manual(values = c("ASV88" = "#2d543d", "ASV3" = "#75b8d1", "ASV201" = "#d175b8")) +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Spat") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
spat
library(gridExtra)
grid.arrange(day1, spat, ncol = 2)
day1 <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = Genus)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_ipsum() +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Day 1") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
day1
day1
day1 <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = ASV)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_ipsum() +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Day 1") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
day1
ASV_signif <- read_excel("inval_tutorial/ASV_signif.xlsx")
pc_FUN <- ASV_signif[ASV_signif$Age == "Day 01", ]
pc_FUN <- pc_FUN[pc_FUN$ASV %in% c("ASV7", "ASV18"), ]
day1 <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = ASV)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_ipsum() +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Day 1") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
day1
spat <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = ASV)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_manual(values = c("ASV88" = "#3f2d54", "ASV3" = "#75b8d1", "ASV201" = "#d175b8")) +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Spat") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
spat
library(gridExtra)
grid.arrange(day1, spat, ncol = 2)
ASV_signif <- read_excel("inval_tutorial/ASV_signif.xlsx")
pc_FUN <- ASV_signif[ASV_signif$Age == "Spat", ]
pc_FUN <- pc_FUN[pc_FUN$ASV %in% c("ASV3", "ASV88", "ASV201"), ]
spat <- ggplot(pc_FUN, aes(x=Treatment, y= ASV, size = Abundance, color = ASV)) +
geom_point(alpha=1)+
scale_size(range = c(.1, 20)) +
scale_colour_manual(values = c("ASV88" = "#3f2d54", "ASV3" = "#75b8d1", "ASV201" = "#d175b8")) +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("") +
xlab("") +
theme(legend.position = "none") +
ggtitle("Spat") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(face = "plain", size = 16))
spat
library(gridExtra)
grid.arrange(day1, spat, ncol = 2)
library("devtools")
library(phyloseq)
library(microbiome)
library(hrbrthemes)
library(viridis)
library(dplyr)
library(ggplot2)
pseq <-  Marissa_MU42022_rarefied_20231016
Marissa_MU42022_rarefied_20231016 <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022_rarefied_20231016.rds")
pseq <-  Marissa_MU42022_rarefied_20231016
OTU = pseq@otu_table
Tax = pseq@tax_table
Metadata = pseq@sam_data
Tree = pseq@phy_tree
pseq <- subset_samples(pseq, !Age %in% c("Spat", "Day 03", "Day 06", "Day 15"))
pseq <- subset_samples(pseq, !Sample.type %in% "Algae")
pseq_fam <- microbiome::aggregate_rare(pseq, level = "Family", detection = 50/100, prevalence = 70/100)
pseq_phy <- microbiome::aggregate_rare(pseq, level = "Phylum", detection = 50/100, prevalence = 70/100)
pseq_gen <- microbiome::aggregate_rare(pseq, level = "Genus", detection = 50/100, prevalence = 70/100)
#convert to compositional data
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq.phy.rel <- microbiome::transform(pseq_phy, "compositional")
pseq.gen.rel <- microbiome::transform(pseq_gen, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 95/100)
pseq.core <- microbiome::transform(pseq.core, "compositional")
set.seed(4235421)
ord <- ordinate(pseq, "MDS", "bray")
plot_ordination(pseq, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
pseq <- psmelt(pseq)
pseq_core <- psmelt(pseq.core)
pseq_fam <- psmelt(pseq_fam)
pseq_phy <- psmelt(pseq_phy)
pseq_phy_rel <- psmelt(pseq.phy.rel)
pseq_fam_rel <- psmelt(pseq.fam.rel)
pseq_gen_rel <- psmelt(pseq.gen.rel)
pseq_Day1 <- psmelt(pseq)
pseq_Day1 <- psmelt(pseq)
library("devtools")
library(phyloseq)
library(microbiome)
Marissa_MU42022_rarefied_20231016 <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022_rarefied_20231016.rds")
##### 01. Load data #####
#data <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022.rds")
pseq <- Marissa_MU42022_rarefied_20231016
pseq_fam <- microbiome::aggregate_rare(pseq,level = "Family", detection = 50/100, prevalence = 70/100)
pseq.fam.rel <- microbiome::transform(pseq_fam, "compositional")
pseq.core <- core(pseq.fam.rel, detection = .1/100, prevalence = 90/100)
pseq.core <- microbiome::transform(pseq.core, "compositional")
set.seed(4235421)
ord <- ordinate(pseq, "MDS", "bray")
eigenvalues <- ord$values$Eigenvalues
eigenvalues <- eigenvalues^2
plot(eigenvalues, type = "b", xlab = "Principal Component", ylab = "Eigenvalues", main = "Scree Plot")
pco_scores <- ord
# Select PCO axes 2 and 3
pco_scores <- pco_scores[, c(2, 3)]
ord <- ordinate(pseq.core, "PCoA", "bray", eig = TRUE)
ordination_plot <- plot_ordination(pseq.core, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
# Print the ordination plot
print(ordination_plot)
ordination_plot <- plot_ordination(pseq, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
# Print the ordination plot
print(ordination_plot)
# Perform the PCoA analysis
ord <- ordinate(pseq.core, "PCoA", "bray")
# Extract the PCO scores
pco_scores <- scores(ord)
# Perform the PCoA analysis
ord <- ordinate(pseq.core, "PCoA", "bray")
# Subset the ord object to select PCO axes 2 and 3 for plotting
ord_selected_axes <- ord[, c(2, 3)]
# Perform the PCoA analysis and store the result
ord <- ordinate(pseq.core, "PCoA", "bray")
# Extract PCoA scores from axes 2 and 3
pco_scores <- scores(ord)
# Perform the PCoA analysis and store the result
ord <- ordinate(pseq.core, "PCoA", "bray")
# Extract PCoA scores from axes 2 and 3
pco_scores <- scores(ord)
library(vegan)
# Perform the PCoA analysis using vegan
pcoa_result <- cmdscale(vegdist(otu_table(pseq.core), "bray"))
# Create an ordination plot using PCoA scores from axes 1 and 2
ordination_plot <- plot_ordination(pseq.core, pcoa_result, color = "Treatment", shape = "Age") + geom_point(size = 4)
# Print the ordination plot
print(ordination_plot)
pvar = round(summary(pseq)$importance[2, 1:2], 2)
pvar = round(summary(ord)$importance[2, 1:2], 2)
ord <- ordinate(pseq, "MDS", "bray")
pvar = round(summary(ord)$importance[2, 1:2], 2)
ord <- ordinate(pseq, "PCoA", "bray", eig = TRUE)
# Perform the PCoA analysis using vegan
pcoa_result <- cmdscale(vegdist(otu_table(pseq.core), "bray"))
# Calculate eigenvalues (variance explained) for PCoA axes
eigenvalues <- eigen(vegdist(otu_table(pseq.core), "bray"))$values
# Calculate the proportion of variation explained by PCoA axes
explained_variance <- eigenvalues / sum(eigenvalues)
# Select the proportion of variation explained by PCoA axes 2 and 3
pvar_2_3 <- round(explained_variance[2:3], 2)
# Perform the PCoA analysis using vegan
pcoa_result <- cmdscale(vegdist(otu_table(pseq), "bray"))
# Calculate eigenvalues (variance explained) for PCoA axes
eigenvalues <- eigen(vegdist(otu_table(pseq), "bray"))$values
eigenvalues
# Calculate the proportion of variation explained by PCoA axes
explained_variance <- eigenvalues / sum(eigenvalues)
explained_variance
pvar_2_3 <- round(explained_variance[2:3], 2)
pvar[1] * 100, "%)"), ylab = paste0("PC2 (", pvar[2] * 100,
# Select the proportion of variation explained by PCoA axes 2 and 3
pvar_2_3 <- round(explained_variance[2:3], 2)
pvar_2_3
pcoa_df <- as.data.frame(cbind(pcoa_result, Treatment = pseq$Treatment, Age = pseq$Age))
pcoa_df <- as.data.frame(cbind(pcoa_result, Treatment = pseq@sam_data$Treatment, Age = pseq@sam_data$Age))
ordination_plot <- plot_ordination(pseq, pcoa_df, color = "Treatment", shape = "Age") + geom_point(size = 4)
pcoa_df <- as.data.frame(cbind(ord, Treatment = pseq@sam_data$Treatment, Age = pseq@sam_data$Age))
# Create the ordination plot
ordination_plot <- plot_ordination(pseq, pcoa_df, color = "Treatment", shape = "Age") + geom_point(size = 4)
install.packages("rgl")
rd <- ordinate(pseq, "MDS", "bray")
# Load the rgl package
library(rgl)
# Create a 3D ordination plot
plot3d(ord, type = "s", color = "Treatment", size = 4)
# Perform the MDS/PCoA analysis
ord <- ordinate(pseq, "MDS", "bray")
# Load the rgl package
library(rgl)
# Extract 3D coordinates from the ordination result
coordinates_3d <- ord$points[, c("Axis.1", "Axis.2", "Axis.3")]
# Create a 3D ordination plot
plot3d(coordinates_3d, type = "s", color = "Treatment", size = 4)
pseq <- psmelt(pseq)
data(pseq)
pseq_psmelt <- psmelt(pseq)
data(pseq)
View(pseq)
install.packages(c("FactoMineR", "factoextra"))
library("factoextra")
library("FactoMineR")
data(pseq)
data(pseq)
install.packages("mydata")
library(mydata)
data(pseq)
PCA(pseq, scale.unit = TRUE, ncp = 5, graph = TRUE)
pcoa <- cmdscale (eurodist, eig = TRUE)
library (vegan)
ordiplot (pcoa, display = 'sites', type = 'text')
ordiplot
pcoa$points[,2] <- -pcoa$points[,2]
ordiplot (pcoa, display = 'sites', type = 't')
head(pseq)
# Select the numerical variables and create a subset of your data
numerical_data <- pseq[, c("Abundance")]
# Perform PCA on the subset
pca_result <- prcomp(numerical_data, scale = TRUE)
# View the PCA result
summary(pca_result)
library(ggplot2)
# View the PCA result
summary(pca_result)
library(ggfortify)
pca_res <- prcomp(pseq, scale. = TRUE)
rd_clr <- phyloseq::ordinate(pseq, "RDA")
(ps_clr <- microbiome::transform(pseq, "clr"))
##### 01. Load data #####
#data <- readRDS("~/GitHub/mb2021_phyloseq/Marissa_MU42022.rds")
pseq <- Marissa_MU42022_rarefied_20231016
(ps_clr <- microbiome::transform(pseq, "clr"))
View(pseq@otu_table)
ord_clr <- phyloseq::ordinate(ps_clr, "RDA")
phyloseq::plot_scree(ord_clr) +
geom_bar(stat="identity", fill = "blue") +
labs(x = "\nAxis", y = "Proportion of Variance\n")
head(ord_clr$CA$eig)
sapply(ord_clr$CA$eig[1:5], function(x) x / sum(ord_clr$CA$eig))
#Scale axes and plot ordination
clr1 <- ord_clr$CA$eig[1] / sum(ord_clr$CA$eig)
clr2 <- ord_clr$CA$eig[2] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(ps, ord_clr, type="samples", color="Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Status), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, type="samples", color="Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Status), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, type="samples", color="Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Treatment), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, type="samples", color="Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, type="samples", color= Treatment) +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, color= "Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, color= Treatment) +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2)
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
clr_dist_matrix <- phyloseq::distance(ps_clr, method = "euclidean")
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps_clr)$Status)
clr_dist_matrix <- phyloseq::distance(ps_clr, method = "euclidean")
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps_clr)$Treatment)
clr_dist_matrix <- phyloseq::distance(ps_clr, method = "euclidean")
#ADONIS test
vegan::adonis2(clr_dist_matrix ~ phyloseq::sample_data(ps_clr)$Treatment)
clr_dist_matrix <- phyloseq::distance(ps_clr, method = "euclidean")
#ADONIS test
vegan::adonis2(clr_dist_matrix ~ phyloseq::sam_data(ps_clr)$Treatment)
clr_dist_matrix <- phyloseq::distance(ps_clr, method = "euclidean")
#ADONIS test
vegan::adonis2(clr_dist_matrix ~ phyloseq::sample_data(ps_clr)$Treatment)
clr3 <- ord_clr$CA$eig[3] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr3 / clr2) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
head(ord_clr$CA$eig)
clr4 <- ord_clr$CA$eig[4] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr4 / clr3) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
phyloseq::plot_ordination(pseq, ord_clr, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr4 / clr3) + theme_classic()
phyloseq::plot_scree(ord_clr) +
geom_bar(stat="identity", fill = "blue") +
labs(x = "\nAxis", y = "Proportion of Variance\n")
head(ord_clr$CA$eig)
lot(clr_data$clr3, clr_data$clr4,
xlab = "CLR3", ylab = "CLR4",
main = "Ordination Plot")
plot(clr_data$clr3, clr_data$clr4,
xlab = "CLR3", ylab = "CLR4",
main = "Ordination Plot")
phyloseq::plot_ordination(pseq, clr1, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr4 / clr3) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
ord_clr <- phyloseq::ordinate(ps_clr, "RDA")
ord_clr
head(ord_clr$CA$eig)
sapply(ord_clr$CA$eig[1:5], function(x) x / sum(ord_clr$CA$eig))
str(ord_clr)
ord_clr
View(ord_clr)
# Access the scores component
scores <- ord_clr$scores
PC3 <- scores[, "PC3"]
PC4 <- scores[, "PC4"]
phyloseq::plot_ordination(pseq, PC3, color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr4 / clr3) +
stat_ellipse(aes(group = Age), linetype = 2) + theme_classic()
PC3
scores
ord_clr
phyloseq::plot_ordination(pseq, ord_clr(c(1,3)), color = "Treatment", shape = "Age") +
geom_point(size = 2) +
coord_fixed(clr4 / clr3) + theme_classic()
plot_ordination(pseq, ord, type = "samples", axes = 3:4,
color = Treatment, shape = Age, label = NULL, title = NULL,
justDF = FALSE)
plot_ordination(pseq, ord, type = "samples", axes = 3:4,
color = "Treatment", shape = "Age", label = NULL, title = NULL,
justDF = FALSE)
plot_ordination(pseq, ord, type = "samples", axes = 2:3,
color = "Treatment", shape = "Age", label = NULL, title = NULL,
justDF = FALSE)
plot_ordination(pseq, ord, type = "samples", axes = 2:3,
color = "Treatment", shape = "Age", label = NULL, title = NULL,
justDF = FALSE) + theme_classic()
plot_ordination(pseq, ord, type = "samples", axes = 3:4,
color = "Treatment", shape = "Age", label = NULL, title = NULL,
justDF = FALSE) + theme_classic()
plot_ordination(pseq, ord, type = "samples", axes = 3:4,
color = "Treatment", shape = "Age", label = NULL, title = NULL,
justDF = FALSE) + theme_classic() + geom_point(size = 4)
library("phyloseq")
library("ggplot2")
## [1] '2.2.1'
library("plyr")
theme_set(theme_classic())
wh0 = genefilter_sample(pseq, filterfun_sample(function(x) x > 5), A=0.5*nsamples(pseq))
GP1 = prune_taxa(wh0, GP)
GP1 = prune_taxa(wh0, pseq)
GP1 = transform_sample_counts(GP1, function(x) 1E6 * x/sum(x))
phylum.sum = tapply(taxa_sums(GP1), tax_table(GP1)[, "Phylum"], sum, na.rm=TRUE)
top5phyla = names(sort(phylum.sum, TRUE))[1:5]
GP1 = prune_taxa((tax_table(GP1)[, "Phylum"] %in% top5phyla), GP1)
GP1
GP.ord <- ordinate(GP1, "NMDS", "bray")
p1 = plot_ordination(GP1, GP.ord, type="taxa", color="Phylum", title="taxa")
print(p1)
p1 + facet_wrap(~Phylum, 3)
p2 = plot_ordination(GP1, GP.ord, type="samples", color="Treatment", shape="Age")
p2 + geom_polygon(aes(fill=Treatment)) + geom_point(size=5) + ggtitle("samples")
p2 = plot_ordination(GP1, GP.ord, type="samples", color="Treatment", shape="Age")
p2 + geom_polygon(aes(fill=Treatment)) + geom_point(size=4) + ggtitle("samples")
p3 = plot_ordination(GP1, GP.ord, type="biplot", color="Treatment", shape="Phylum", title="biplot")
p3
GP1.shape.names = get_taxa_unique(GP1, "Phylum")
GP1.shape <- 15:(15 + length(GP1.shape.names) - 1)
names(GP1.shape) <- GP1.shape.names
GP1.shape["samples"] <- 16
p3 + scale_shape_manual(values=GP1.shape)
p4 = plot_ordination(GP1, GP.ord, type="split", color="Phylum", shape="Treatment", label="Age", title="split")
p4
gg_color_hue <- function(n){
hues = seq(15, 375, length=n+1)
hcl(h=hues, l=65, c=100)[1:n]
}
color.names <- levels(p4$data$Phylum)
p4cols <- gg_color_hue(length(color.names))
names(p4cols) <- color.names
p4cols["samples"] <- "black"
p4 + scale_color_manual(values=p4cols)
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Treatment")
}, GP1, dist)
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, pseq, dist){
ordi = ordinate(pseq, method=i, distance=dist)
plot_ordination(pseq, ordi, "samples", color="Treatment")
}, GP1, dist)
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, pseq, dist){
ordi = ordinate(pseq, method=i, distance=dist)
plot_ordination(pseq, ordi, "samples", color="Treatment")
}, GP1, dist)
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, pseq, dist){
ordi = ordinate(pseq, method=i, distance=dist)
plot_ordination(pseq, ordi, "samples", color="Treatment")
}, GP1, dist)
ordu = ordinate(GP1, "PCoA", "unifrac", weighted=TRUE)
plot_ordination(GP1, ordu, color="Treatment", shape="Age")
ordu = ordinate(GP1, "PCoA", "unifrac", weighted=TRUE)
abort
z
z
ordu = ordinate(GP1, "PCoA", "unifrac", weighted=TRUE)
set.seed(4235421)
ord <- ordinate(pseq.core, "MDS", "bray")
p <- plot_ordination(pseq.core, ord, color = "Treatment", shape = "Age") + geom_point(size = 4)
p = p + geom_point(size=7, alpha=0.75)
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
GP.ord <- ordinate(GP1, "NMDS", "bray")
p1 = plot_ordination(GP1, GP.ord, type="taxa", color="Family", title="taxa")
print(p1)
phylum.sum = tapply(taxa_sums(GP1), tax_table(GP1)[, "Family"], sum, na.rm=TRUE)
top5phyla = names(sort(phylum.sum, TRUE))[1:5]
GP1 = prune_taxa((tax_table(GP1)[, "Family"] %in% top5phyla), GP1)
GP1
wh0 = genefilter_sample(pseq, filterfun_sample(function(x) x > 5), A=0.5*nsamples(pseq))
GP1 = prune_taxa(wh0, pseq)
#transform to even sample depth
GP1 = transform_sample_counts(GP1, function(x) 1E6 * x/sum(x))
#Keep only the most abundant five families.
phylum.sum = tapply(taxa_sums(GP1), tax_table(GP1)[, "Family"], sum, na.rm=TRUE)
top5phyla = names(sort(phylum.sum, TRUE))[1:5]
GP1 = prune_taxa((tax_table(GP1)[, "Family"] %in% top5phyla), GP1)
GP1
GP.ord <- ordinate(GP1, "NMDS", "bray")
p1 = plot_ordination(GP1, GP.ord, type="taxa", color="Family", title="taxa")
print(p1)
p1 + facet_wrap(~Family, 3)
p2 = plot_ordination(GP1, GP.ord, type="samples", color="Treatment", shape="Age")
p2 + geom_polygon(aes(fill=Treatment)) + geom_point(size=4) + ggtitle("samples")
p3 = plot_ordination(GP1, GP.ord, type="biplot", color="Treatment", shape="Family", title="biplot")
# Some stuff to modify the automatic shape scale
GP1.shape.names = get_taxa_unique(GP1, "Family")
GP1.shape <- 15:(15 + length(GP1.shape.names) - 1)
names(GP1.shape) <- GP1.shape.names
GP1.shape["samples"] <- 16
p3 + scale_shape_manual(values=GP1.shape)
p4 = plot_ordination(GP1, GP.ord, type="split", color="Family", shape="Treatment", label="Age", title="split")
p4
p4 = plot_ordination(GP1, GP.ord, type="split", color="Family", shape="Age", label="Treatment", title="split")
p4
